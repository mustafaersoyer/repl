{"version":3,"sources":["../lib/gtag.ts","../src/index.ts","../src/components/TypebotViewer.tsx","../src/contexts/TypebotContext.tsx","../src/services/variable.ts","../src/components/ConversationContainer.tsx","../src/components/ChatGroup/ChatGroup.tsx","../src/components/ChatGroup/AvatarSideContainer.tsx","../src/components/avatars/Avatar.tsx","../src/components/avatars/DefaultAvatar.tsx","../src/services/logic.ts","../src/services/utils.ts","../src/services/integration.ts","../src/services/inputs.ts","../src/contexts/AnswersContext.tsx","../src/contexts/ChatContext.tsx","../src/services/chat.ts","../src/components/ChatGroup/ChatBlock/bubbles/HostBubble.tsx","../src/components/ChatGroup/ChatBlock/bubbles/EmbedBubble.tsx","../src/components/ChatGroup/ChatBlock/bubbles/TypingContent.tsx","../src/components/ChatGroup/ChatBlock/bubbles/ImageBubble.tsx","../src/components/ChatGroup/ChatBlock/bubbles/TextBubble.tsx","../src/components/ChatGroup/ChatBlock/bubbles/VideoBubble.tsx","../src/components/ChatGroup/ChatBlock/InputChatBlock.tsx","../src/components/ChatGroup/ChatBlock/bubbles/GuestBubble.tsx","../src/components/ChatGroup/ChatBlock/inputs/TextForm/TextForm.tsx","../src/components/ChatGroup/ChatBlock/inputs/SendButton.tsx","../src/assets/icons.tsx","../src/components/ChatGroup/ChatBlock/inputs/TextForm/TextInput.tsx","../src/components/ChatGroup/ChatBlock/inputs/DateForm.tsx","../src/components/ChatGroup/ChatBlock/inputs/ChoiceForm.tsx","../src/components/ChatGroup/ChatBlock/inputs/PaymentForm/PaymentForm.tsx","../src/components/ChatGroup/ChatBlock/inputs/PaymentForm/StripePaymentForm.tsx","../src/services/stripe.ts","../lib/stripe.ts","../src/components/ChatGroup/ChatBlock/inputs/RatingForm.tsx","../src/components/ChatGroup/ChatBlock/inputs/FileUploadForm.tsx","../src/services/theme.ts","../src/components/LiteBadge.tsx"],"sourcesContent":["import { GoogleAnalyticsOptions } from 'models'\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\ndeclare const gtag: any\r\n\r\nconst initGoogleAnalytics = (id: string): Promise<void> =>\r\n  new Promise((resolve) => {\r\n    const existingScript = document.getElementById('gtag')\r\n    if (!existingScript) {\r\n      const script = document.createElement('script')\r\n      script.src = `https://www.googletagmanager.com/gtag/js?id=${id}`\r\n      script.id = 'gtag'\r\n      const initScript = document.createElement('script')\r\n      initScript.innerHTML = `window.dataLayer = window.dataLayer || [];\r\n      function gtag(){dataLayer.push(arguments);}\r\n      gtag('js', new Date());\r\n    \r\n      gtag('config', '${id}');\r\n      `\r\n      document.body.appendChild(script)\r\n      document.body.appendChild(initScript)\r\n      script.onload = () => {\r\n        resolve()\r\n      }\r\n    }\r\n    if (existingScript) resolve()\r\n  })\r\n\r\nexport const sendGaEvent = (options: GoogleAnalyticsOptions) => {\r\n  if (!options) return\r\n  gtag('event', options.action, {\r\n    event_category: options.category,\r\n    event_label: options.label,\r\n    value: options.value,\r\n  })\r\n}\r\n\r\nexport default initGoogleAnalytics\r\n","export * from './components/TypebotViewer'\r\nexport { parseVariables } from './services/variable'\r\nexport * from 'util'\r\n","import React, { CSSProperties, useMemo } from 'react'\r\nimport { TypebotContext } from '../contexts/TypebotContext'\r\nimport Frame from 'react-frame-component'\r\nimport styles from '../assets/style.css'\r\nimport importantStyles from '../assets/importantStyles.css'\r\nimport phoneSyle from '../assets/phone.css'\r\nimport { ConversationContainer } from './ConversationContainer'\r\nimport { AnswersContext } from '../contexts/AnswersContext'\r\nimport {\r\n  Answer,\r\n  BackgroundType,\r\n  Edge,\r\n  PublicTypebot,\r\n  VariableWithValue,\r\n} from 'models'\r\nimport { Log } from 'db'\r\nimport { LiteBadge } from './LiteBadge'\r\nimport { getViewerUrl, isEmpty } from 'utils'\r\n\r\nexport type TypebotViewerProps = {\r\n  typebot: Omit<PublicTypebot, 'updatedAt' | 'createdAt'>\r\n  isPreview?: boolean\r\n  apiHost?: string\r\n  style?: CSSProperties\r\n  predefinedVariables?: { [key: string]: string | undefined }\r\n  resultId?: string\r\n  startGroupId?: string\r\n  isLoading?: boolean\r\n  onNewGroupVisible?: (edge: Edge) => void\r\n  onNewAnswer?: (answer: Answer & { uploadedFiles: boolean }) => Promise<void>\r\n  onNewLog?: (log: Omit<Log, 'id' | 'createdAt' | 'resultId'>) => void\r\n  onCompleted?: () => void\r\n  onVariablesUpdated?: (variables: VariableWithValue[]) => void\r\n}\r\n\r\nexport const TypebotViewer = ({\r\n  typebot,\r\n  apiHost = getViewerUrl(),\r\n  isPreview = false,\r\n  isLoading = false,\r\n  style,\r\n  resultId,\r\n  startGroupId,\r\n  predefinedVariables,\r\n  onNewLog,\r\n  onNewGroupVisible,\r\n  onNewAnswer,\r\n  onCompleted,\r\n  onVariablesUpdated,\r\n}: TypebotViewerProps) => {\r\n  const containerBgColor = useMemo(\r\n    () =>\r\n      typebot?.theme?.general?.background?.type === BackgroundType.COLOR\r\n        ? typebot.theme.general.background.content\r\n        : 'transparent',\r\n    [typebot?.theme?.general?.background]\r\n  )\r\n  const handleNewGroupVisible = (edge: Edge) =>\r\n    onNewGroupVisible && onNewGroupVisible(edge)\r\n\r\n  const handleNewAnswer = (answer: Answer & { uploadedFiles: boolean }) =>\r\n    onNewAnswer && onNewAnswer(answer)\r\n\r\n  const handleNewLog = (log: Omit<Log, 'id' | 'createdAt' | 'resultId'>) =>\r\n    onNewLog && onNewLog(log)\r\n\r\n  const handleCompleted = () => onCompleted && onCompleted()\r\n\r\n  if (isEmpty(apiHost))\r\n    return <p>process.env.NEXT_PUBLIC_VIEWER_URL is missing in env</p>\r\n  return (\r\n    <Frame\r\n      id=\"typebot-iframe\"\r\n      head={\r\n        <style>\r\n          {phoneSyle}\r\n          {styles}\r\n          {typebot.theme?.customCss}\r\n          {importantStyles}\r\n        </style>\r\n      }\r\n      name=\"Typebot viewer\"\r\n      style={{ width: '100%', height: '100%', border: 'none', ...style }}\r\n    >\r\n      <style\r\n        dangerouslySetInnerHTML={{\r\n          __html: `@import url('https://fonts.googleapis.com/css2?family=${\r\n            typebot?.theme?.general?.font ?? 'Open Sans'\r\n          }:wght@300;400;600&display=swap');`,\r\n        }}\r\n      />\r\n      <TypebotContext\r\n        typebot={typebot}\r\n        apiHost={apiHost}\r\n        isPreview={isPreview}\r\n        onNewLog={handleNewLog}\r\n        isLoading={isLoading}\r\n      >\r\n        <AnswersContext\r\n          resultId={resultId}\r\n          onNewAnswer={handleNewAnswer}\r\n          onVariablesUpdated={onVariablesUpdated}\r\n        >\r\n          <div\r\n            className=\"flex text-base overflow-hidden bg-cover h-screen w-screen flex-col items-center typebot-container\"\r\n            style={{\r\n              // We set this as inline style to avoid color flash for SSR\r\n              backgroundColor: containerBgColor ?? 'transparent',\r\n            }}\r\n            data-testid=\"container\"\r\n          >\r\n            <div className=\"flex w-full h-full justify-center\">\r\n              <ConversationContainer\r\n                theme={typebot.theme}\r\n                onNewGroupVisible={handleNewGroupVisible}\r\n                onCompleted={handleCompleted}\r\n                predefinedVariables={predefinedVariables}\r\n                startGroupId={startGroupId}\r\n              />\r\n            </div>\r\n            {typebot.settings.general.isBrandingEnabled && <LiteBadge />}\r\n          </div>\r\n        </AnswersContext>\r\n      </TypebotContext>\r\n    </Frame>\r\n  )\r\n}\r\n","import { TypebotViewerProps } from 'components/TypebotViewer'\r\nimport { Log } from 'db'\r\nimport { Edge, PublicTypebot, Typebot } from 'models'\r\nimport React, {\r\n  createContext,\r\n  ReactNode,\r\n  useContext,\r\n  useEffect,\r\n  useState,\r\n} from 'react'\r\nimport { safeStringify } from 'services/variable'\r\n\r\nexport type LinkedTypebot = Pick<\r\n  PublicTypebot | Typebot,\r\n  'id' | 'groups' | 'variables' | 'edges'\r\n>\r\n\r\nexport type LinkedTypebotQueue = {\r\n  typebotId: string\r\n  edgeId: string\r\n}[]\r\n\r\nconst typebotContext = createContext<{\r\n  currentTypebotId: string\r\n  typebot: TypebotViewerProps['typebot']\r\n  linkedTypebots: LinkedTypebot[]\r\n  apiHost: string\r\n  isPreview: boolean\r\n  linkedBotQueue: LinkedTypebotQueue\r\n  isLoading: boolean\r\n  setCurrentTypebotId: (id: string) => void\r\n  updateVariableValue: (variableId: string, value: unknown) => void\r\n  createEdge: (edge: Edge) => void\r\n  injectLinkedTypebot: (typebot: Typebot | PublicTypebot) => LinkedTypebot\r\n  popEdgeIdFromLinkedTypebotQueue: () => void\r\n  pushEdgeIdInLinkedTypebotQueue: (bot: {\r\n    typebotId: string\r\n    edgeId: string\r\n  }) => void\r\n  onNewLog: (log: Omit<Log, 'id' | 'createdAt' | 'resultId'>) => void\r\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n  //@ts-ignore\r\n}>({})\r\n\r\nexport const TypebotContext = ({\r\n  children,\r\n  typebot,\r\n  apiHost,\r\n  isPreview,\r\n  isLoading,\r\n  onNewLog,\r\n}: {\r\n  children: ReactNode\r\n  typebot: TypebotViewerProps['typebot']\r\n  apiHost: string\r\n  isLoading: boolean\r\n  isPreview: boolean\r\n  onNewLog: (log: Omit<Log, 'id' | 'createdAt' | 'resultId'>) => void\r\n}) => {\r\n  const [localTypebot, setLocalTypebot] =\r\n    useState<TypebotViewerProps['typebot']>(typebot)\r\n  const [linkedTypebots, setLinkedTypebots] = useState<LinkedTypebot[]>([])\r\n  const [currentTypebotId, setCurrentTypebotId] = useState(typebot.typebotId)\r\n  const [linkedBotQueue, setLinkedBotQueue] = useState<LinkedTypebotQueue>([])\r\n\r\n  useEffect(() => {\r\n    setLocalTypebot((localTypebot) => ({\r\n      ...localTypebot,\r\n      theme: typebot.theme,\r\n      settings: typebot.settings,\r\n    }))\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [typebot.theme, typebot.settings])\r\n\r\n  const updateVariableValue = (variableId: string, value: unknown) => {\r\n    const formattedValue = safeStringify(value)\r\n\r\n    setLocalTypebot((typebot) => ({\r\n      ...typebot,\r\n      variables: typebot.variables.map((v) =>\r\n        v.id === variableId ? { ...v, value: formattedValue } : v\r\n      ),\r\n    }))\r\n  }\r\n\r\n  const createEdge = (edge: Edge) => {\r\n    setLocalTypebot((typebot) => ({\r\n      ...typebot,\r\n      edges: [...typebot.edges, edge],\r\n    }))\r\n  }\r\n\r\n  const injectLinkedTypebot = (typebot: Typebot | PublicTypebot) => {\r\n    const typebotToInject = {\r\n      id: 'typebotId' in typebot ? typebot.typebotId : typebot.id,\r\n      groups: typebot.groups,\r\n      edges: typebot.edges,\r\n      variables: typebot.variables,\r\n    }\r\n    setLinkedTypebots((typebots) => [...typebots, typebotToInject])\r\n    const updatedTypebot = {\r\n      ...localTypebot,\r\n      groups: [...localTypebot.groups, ...typebotToInject.groups],\r\n      variables: [...localTypebot.variables, ...typebotToInject.variables],\r\n      edges: [...localTypebot.edges, ...typebotToInject.edges],\r\n    }\r\n    setLocalTypebot(updatedTypebot)\r\n    return typebotToInject\r\n  }\r\n\r\n  const pushEdgeIdInLinkedTypebotQueue = (bot: {\r\n    typebotId: string\r\n    edgeId: string\r\n  }) => setLinkedBotQueue((queue) => [...queue, bot])\r\n\r\n  const popEdgeIdFromLinkedTypebotQueue = () => {\r\n    setLinkedBotQueue((queue) => queue.slice(1))\r\n    setCurrentTypebotId(linkedBotQueue[0].typebotId)\r\n  }\r\n\r\n  return (\r\n    <typebotContext.Provider\r\n      value={{\r\n        typebot: localTypebot,\r\n        linkedTypebots,\r\n        apiHost,\r\n        isPreview,\r\n        updateVariableValue,\r\n        createEdge,\r\n        injectLinkedTypebot,\r\n        onNewLog,\r\n        linkedBotQueue,\r\n        isLoading,\r\n        pushEdgeIdInLinkedTypebotQueue,\r\n        popEdgeIdFromLinkedTypebotQueue,\r\n        currentTypebotId,\r\n        setCurrentTypebotId,\r\n      }}\r\n    >\r\n      {children}\r\n    </typebotContext.Provider>\r\n  )\r\n}\r\n\r\nexport const useTypebot = () => useContext(typebotContext)\r\n","import { Variable, VariableWithValue } from 'models'\r\nimport { isDefined, isNotDefined } from 'utils'\r\n\r\nexport const stringContainsVariable = (str: string): boolean =>\r\n  /\\{\\{(.*?)\\}\\}/g.test(str)\r\n\r\nexport const parseVariables =\r\n  (\r\n    variables: Variable[],\r\n    options: { fieldToParse?: 'value' | 'id'; escapeForJson?: boolean } = {\r\n      fieldToParse: 'value',\r\n      escapeForJson: false,\r\n    }\r\n  ) =>\r\n  (text: string | undefined): string => {\r\n    if (!text || text === '') return ''\r\n    return text.replace(/\\{\\{(.*?)\\}\\}/g, (_, fullVariableString) => {\r\n      const matchedVarName = fullVariableString.replace(/{{|}}/g, '')\r\n      const variable = variables.find((v) => {\r\n        return matchedVarName === v.name && isDefined(v.value)\r\n      }) as VariableWithValue | undefined\r\n      if (!variable) return ''\r\n      if (options.fieldToParse === 'id') return variable.id\r\n      const { value } = variable\r\n      if (options.escapeForJson) return jsonParse(value)\r\n      const parsedValue = safeStringify(value)\r\n      if (!parsedValue) return ''\r\n      return parsedValue\r\n    })\r\n  }\r\n\r\nexport const safeStringify = (val: unknown): string | null => {\r\n  if (isNotDefined(val)) return null\r\n  if (typeof val === 'string') return val\r\n  try {\r\n    return JSON.stringify(val)\r\n  } catch {\r\n    console.warn('Failed to safely stringify variable value', val)\r\n    return null\r\n  }\r\n}\r\n\r\nexport const parseCorrectValueType = (\r\n  value: Variable['value']\r\n): string | boolean | number | null | undefined => {\r\n  if (value === null) return null\r\n  if (value === undefined) return undefined\r\n  const isNumberStartingWithZero =\r\n    value.startsWith('0') && !value.startsWith('0.') && value.length > 1\r\n  if (typeof value === 'string' && isNumberStartingWithZero) return value\r\n  if (typeof value === 'number') return value\r\n  if (value === 'true') return true\r\n  if (value === 'false') return false\r\n  if (value === 'null') return null\r\n  if (value === 'undefined') return undefined\r\n  // isNaN works with strings\r\n  if (isNaN(value as unknown as number)) return value\r\n  return Number(value)\r\n}\r\n\r\nconst jsonParse = (str: string) =>\r\n  str\r\n    .replace(/\\n/g, `\\\\n`)\r\n    .replace(/\"/g, `\\\\\"`)\r\n    .replace(/\\\\[^n\"]/g, `\\\\\\\\ `)\r\n\r\nexport const parseVariablesInObject = (\r\n  object: { [key: string]: string | number },\r\n  variables: Variable[]\r\n) =>\r\n  Object.keys(object).reduce((newObj, key) => {\r\n    const currentValue = object[key]\r\n    return {\r\n      ...newObj,\r\n      [key]:\r\n        typeof currentValue === 'string'\r\n          ? parseVariables(variables)(currentValue)\r\n          : currentValue,\r\n    }\r\n  }, {})\r\n","import React, { useEffect, useRef, useState } from 'react'\r\n\r\nimport { ChatGroup } from './ChatGroup'\r\nimport { useFrame } from 'react-frame-component'\r\nimport { setCssVariablesValue } from '../services/theme'\r\nimport { useAnswers } from '../contexts/AnswersContext'\r\nimport { Group, Edge, PublicTypebot, Theme, VariableWithValue } from 'models'\r\nimport { byId, isDefined, isInputBlock, isNotDefined } from 'utils'\r\nimport { animateScroll as scroll } from 'react-scroll'\r\nimport { LinkedTypebot, useTypebot } from 'contexts/TypebotContext'\r\nimport { ChatContext } from 'contexts/ChatContext'\r\n\r\ntype Props = {\r\n  theme: Theme\r\n  predefinedVariables?: { [key: string]: string | undefined }\r\n  startGroupId?: string\r\n  onNewGroupVisible: (edge: Edge) => void\r\n  onCompleted: () => void\r\n}\r\nexport const ConversationContainer = ({\r\n  theme,\r\n  predefinedVariables,\r\n  startGroupId,\r\n  onNewGroupVisible,\r\n  onCompleted,\r\n}: Props) => {\r\n  const {\r\n    typebot,\r\n    updateVariableValue,\r\n    linkedBotQueue,\r\n    popEdgeIdFromLinkedTypebotQueue,\r\n  } = useTypebot()\r\n  const { document: frameDocument } = useFrame()\r\n  const [displayedGroups, setDisplayedGroups] = useState<\r\n    { group: Group; startBlockIndex: number }[]\r\n  >([])\r\n  const { updateVariables } = useAnswers()\r\n  const bottomAnchor = useRef<HTMLDivElement | null>(null)\r\n  const scrollableContainer = useRef<HTMLDivElement | null>(null)\r\n  const [hasStarted, setHasStarted] = useState(false)\r\n\r\n  const displayNextGroup = ({\r\n    edgeId,\r\n    updatedTypebot,\r\n    groupId,\r\n  }: {\r\n    edgeId?: string\r\n    groupId?: string\r\n    updatedTypebot?: PublicTypebot | LinkedTypebot\r\n  }) => {\r\n    const currentTypebot = updatedTypebot ?? typebot\r\n    if (groupId) {\r\n      const nextGroup = currentTypebot.groups.find(byId(groupId))\r\n      if (!nextGroup) return\r\n      onNewGroupVisible({\r\n        id: 'edgeId',\r\n        from: { groupId: 'block', blockId: 'block' },\r\n        to: { groupId },\r\n      })\r\n      return setDisplayedGroups([\r\n        ...displayedGroups,\r\n        { group: nextGroup, startBlockIndex: 0 },\r\n      ])\r\n    }\r\n    const nextEdge = currentTypebot.edges.find(byId(edgeId))\r\n    if (!nextEdge) {\r\n      if (linkedBotQueue.length > 0) {\r\n        const nextEdgeId = linkedBotQueue[0].edgeId\r\n        popEdgeIdFromLinkedTypebotQueue()\r\n        displayNextGroup({ edgeId: nextEdgeId })\r\n      }\r\n      return onCompleted()\r\n    }\r\n    const nextGroup = currentTypebot.groups.find(byId(nextEdge.to.groupId))\r\n    if (!nextGroup) return onCompleted()\r\n    const startBlockIndex = nextEdge.to.blockId\r\n      ? nextGroup.blocks.findIndex(byId(nextEdge.to.blockId))\r\n      : 0\r\n    onNewGroupVisible(nextEdge)\r\n    setDisplayedGroups([\r\n      ...displayedGroups,\r\n      { group: nextGroup, startBlockIndex },\r\n    ])\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (hasStarted) return\r\n    if (\r\n      isDefined(predefinedVariables) &&\r\n      Object.keys(predefinedVariables).length > 0\r\n    ) {\r\n      const prefilledVariables = injectPredefinedVariables(predefinedVariables)\r\n      updateVariables(prefilledVariables)\r\n    }\r\n    setHasStarted(true)\r\n    const startEdge = typebot.groups[0].blocks[0].outgoingEdgeId\r\n    if (!startEdge && !startGroupId) return\r\n    displayNextGroup({\r\n      edgeId: startGroupId ? undefined : startEdge,\r\n      groupId: startGroupId,\r\n    })\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [predefinedVariables])\r\n\r\n  const injectPredefinedVariables = (predefinedVariables: {\r\n    [key: string]: string | undefined\r\n  }) => {\r\n    const prefilledVariables: VariableWithValue[] = []\r\n    Object.keys(predefinedVariables).forEach((key) => {\r\n      const matchingVariable = typebot.variables.find(\r\n        (v) => v.name.toLowerCase() === key.toLowerCase()\r\n      )\r\n      if (!predefinedVariables || isNotDefined(matchingVariable)) return\r\n      const value = predefinedVariables[key]\r\n      if (!value) return\r\n      updateVariableValue(matchingVariable?.id, value)\r\n      prefilledVariables.push({ ...matchingVariable, value })\r\n    })\r\n    return prefilledVariables\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!frameDocument) return\r\n    setCssVariablesValue(theme, frameDocument.body.style)\r\n  }, [theme, frameDocument])\r\n\r\n  const autoScrollToBottom = () => {\r\n    if (!scrollableContainer.current) return\r\n    setTimeout(() => {\r\n      scroll.scrollToBottom({\r\n        duration: 500,\r\n        container: scrollableContainer.current,\r\n      })\r\n    }, 1)\r\n  }\r\n\r\n  return (\r\n    <div\r\n      ref={scrollableContainer}\r\n      className=\"overflow-y-scroll w-full lg:w-3/4 min-h-full rounded lg:px-5 px-3 pt-10 relative scrollable-container typebot-chat-view\"\r\n    >\r\n      <ChatContext onScroll={autoScrollToBottom}>\r\n        {displayedGroups.map((displayedGroup, idx) => {\r\n          const groupAfter = displayedGroups[idx + 1]\r\n          const groupAfterStartsWithInput =\r\n            groupAfter &&\r\n            isInputBlock(groupAfter.group.blocks[groupAfter.startBlockIndex])\r\n          return (\r\n            <ChatGroup\r\n              key={displayedGroup.group.id + idx}\r\n              blocks={displayedGroup.group.blocks}\r\n              startBlockIndex={displayedGroup.startBlockIndex}\r\n              onGroupEnd={displayNextGroup}\r\n              groupTitle={displayedGroup.group.title}\r\n              keepShowingHostAvatar={\r\n                idx === displayedGroups.length - 1 || groupAfterStartsWithInput\r\n              }\r\n            />\r\n          )\r\n        })}\r\n      </ChatContext>\r\n\r\n      {/* We use a block to simulate padding because it makes iOS scroll flicker */}\r\n      <div className=\"w-full h-32\" ref={bottomAnchor} />\r\n    </div>\r\n  )\r\n}\r\n","import React, { useEffect, useRef, useState } from 'react'\r\nimport { TransitionGroup, CSSTransition } from 'react-transition-group'\r\nimport { AvatarSideContainer } from './AvatarSideContainer'\r\nimport { LinkedTypebot, useTypebot } from '../../contexts/TypebotContext'\r\nimport {\r\n  isBubbleBlock,\r\n  isBubbleBlockType,\r\n  isChoiceInput,\r\n  isDefined,\r\n  isInputBlock,\r\n  isIntegrationBlock,\r\n  isLogicBlock,\r\n  byId,\r\n} from 'utils'\r\nimport { executeLogic } from 'services/logic'\r\nimport { executeIntegration } from 'services/integration'\r\nimport { parseRetryBlock, blockCanBeRetried } from 'services/inputs'\r\nimport { parseVariables } from '../../services/variable'\r\nimport { useAnswers } from 'contexts/AnswersContext'\r\nimport {\r\n  BubbleBlock,\r\n  InputBlock,\r\n  LogicBlockType,\r\n  PublicTypebot,\r\n  Block,\r\n} from 'models'\r\nimport { useChat } from 'contexts/ChatContext'\r\nimport { getLastChatBlockType } from 'services/chat'\r\nimport { HostBubble } from './ChatBlock/bubbles/HostBubble'\r\nimport { InputChatBlock, InputSubmitContent } from './ChatBlock/InputChatBlock'\r\n\r\ntype ChatGroupProps = {\r\n  blocks: Block[]\r\n  startBlockIndex: number\r\n  groupTitle: string\r\n  keepShowingHostAvatar: boolean\r\n  onGroupEnd: ({\r\n    edgeId,\r\n    updatedTypebot,\r\n  }: {\r\n    edgeId?: string\r\n    updatedTypebot?: PublicTypebot | LinkedTypebot\r\n  }) => void\r\n}\r\n\r\ntype ChatDisplayChunk = { bubbles: BubbleBlock[]; input?: InputBlock }\r\n\r\nexport const ChatGroup = ({\r\n  blocks,\r\n  startBlockIndex,\r\n  groupTitle,\r\n  onGroupEnd,\r\n  keepShowingHostAvatar,\r\n}: ChatGroupProps) => {\r\n  const {\r\n    currentTypebotId,\r\n    typebot,\r\n    updateVariableValue,\r\n    createEdge,\r\n    apiHost,\r\n    isPreview,\r\n    onNewLog,\r\n    injectLinkedTypebot,\r\n    linkedTypebots,\r\n    setCurrentTypebotId,\r\n    pushEdgeIdInLinkedTypebotQueue,\r\n  } = useTypebot()\r\n  const { resultValues, updateVariables, resultId } = useAnswers()\r\n  const { scroll } = useChat()\r\n  const [processedBlocks, setProcessedBlocks] = useState<Block[]>([])\r\n  const [displayedChunks, setDisplayedChunks] = useState<ChatDisplayChunk[]>([])\r\n\r\n  const insertBlockInStack = (nextBlock: Block) => {\r\n    setProcessedBlocks([...processedBlocks, nextBlock])\r\n    if (isBubbleBlock(nextBlock)) {\r\n      const lastBlockType = getLastChatBlockType(processedBlocks)\r\n      lastBlockType && isBubbleBlockType(lastBlockType)\r\n        ? setDisplayedChunks(\r\n            displayedChunks.map((c, idx) =>\r\n              idx === displayedChunks.length - 1\r\n                ? { bubbles: [...c.bubbles, nextBlock] }\r\n                : c\r\n            )\r\n          )\r\n        : setDisplayedChunks([...displayedChunks, { bubbles: [nextBlock] }])\r\n    }\r\n    if (isInputBlock(nextBlock)) {\r\n      displayedChunks.length === 0 ||\r\n      isDefined(displayedChunks[displayedChunks.length - 1].input)\r\n        ? setDisplayedChunks([\r\n            ...displayedChunks,\r\n            { bubbles: [], input: nextBlock },\r\n          ])\r\n        : setDisplayedChunks(\r\n            displayedChunks.map((c, idx) =>\r\n              idx === displayedChunks.length - 1\r\n                ? { ...c, input: nextBlock }\r\n                : c\r\n            )\r\n          )\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    const nextBlock = blocks[startBlockIndex]\r\n    if (nextBlock) insertBlockInStack(nextBlock)\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    scroll()\r\n    onNewBlockDisplayed()\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [processedBlocks])\r\n\r\n  const onNewBlockDisplayed = async () => {\r\n    const currentBlock = [...processedBlocks].pop()\r\n    if (!currentBlock) return\r\n    if (isLogicBlock(currentBlock)) {\r\n      const { nextEdgeId, linkedTypebot } = await executeLogic(currentBlock, {\r\n        isPreview,\r\n        apiHost,\r\n        typebot,\r\n        linkedTypebots,\r\n        updateVariableValue,\r\n        updateVariables,\r\n        injectLinkedTypebot,\r\n        onNewLog,\r\n        createEdge,\r\n        setCurrentTypebotId,\r\n        pushEdgeIdInLinkedTypebotQueue,\r\n        currentTypebotId,\r\n      })\r\n      const isRedirecting =\r\n        currentBlock.type === LogicBlockType.REDIRECT &&\r\n        currentBlock.options.isNewTab === false\r\n      if (isRedirecting) return\r\n      nextEdgeId\r\n        ? onGroupEnd({ edgeId: nextEdgeId, updatedTypebot: linkedTypebot })\r\n        : displayNextBlock()\r\n    }\r\n    if (isIntegrationBlock(currentBlock)) {\r\n      const nextEdgeId = await executeIntegration({\r\n        block: currentBlock,\r\n        context: {\r\n          apiHost,\r\n          typebotId: currentTypebotId,\r\n          groupId: currentBlock.groupId,\r\n          blockId: currentBlock.id,\r\n          variables: typebot.variables,\r\n          isPreview,\r\n          updateVariableValue,\r\n          updateVariables,\r\n          resultValues,\r\n          groups: typebot.groups,\r\n          onNewLog,\r\n          resultId,\r\n        },\r\n      })\r\n      nextEdgeId ? onGroupEnd({ edgeId: nextEdgeId }) : displayNextBlock()\r\n    }\r\n    if (currentBlock.type === 'start')\r\n      onGroupEnd({ edgeId: currentBlock.outgoingEdgeId })\r\n  }\r\n\r\n  const displayNextBlock = (\r\n    answerContent?: InputSubmitContent,\r\n    isRetry?: boolean\r\n  ) => {\r\n    scroll()\r\n    const currentBlock = [...processedBlocks].pop()\r\n    if (currentBlock) {\r\n      if (isRetry && blockCanBeRetried(currentBlock))\r\n        return insertBlockInStack(\r\n          parseRetryBlock(currentBlock, typebot.variables, createEdge)\r\n        )\r\n      if (\r\n        isInputBlock(currentBlock) &&\r\n        currentBlock.options?.variableId &&\r\n        answerContent\r\n      ) {\r\n        updateVariableValue(\r\n          currentBlock.options.variableId,\r\n          answerContent.value\r\n        )\r\n      }\r\n      const isSingleChoiceBlock =\r\n        isChoiceInput(currentBlock) && !currentBlock.options.isMultipleChoice\r\n      if (isSingleChoiceBlock) {\r\n        const nextEdgeId = currentBlock.items.find(\r\n          byId(answerContent?.itemId)\r\n        )?.outgoingEdgeId\r\n        if (nextEdgeId) return onGroupEnd({ edgeId: nextEdgeId })\r\n      }\r\n\r\n      if (\r\n        currentBlock?.outgoingEdgeId ||\r\n        processedBlocks.length === blocks.length\r\n      )\r\n        return onGroupEnd({ edgeId: currentBlock.outgoingEdgeId })\r\n    }\r\n    const nextBlock = blocks[processedBlocks.length + startBlockIndex]\r\n    nextBlock ? insertBlockInStack(nextBlock) : onGroupEnd({})\r\n  }\r\n\r\n  const avatarSrc = typebot.theme.chat.hostAvatar?.url\r\n\r\n  return (\r\n    <div className=\"flex w-full\" data-group-name={groupTitle}>\r\n      <div className=\"flex flex-col w-full min-w-0\">\r\n        {displayedChunks.map((chunk, idx) => (\r\n          <ChatChunks\r\n            key={idx}\r\n            displayChunk={chunk}\r\n            hostAvatar={{\r\n              isEnabled: typebot.theme.chat.hostAvatar?.isEnabled ?? true,\r\n              src: avatarSrc && parseVariables(typebot.variables)(avatarSrc),\r\n            }}\r\n            hasGuestAvatar={typebot.theme.chat.guestAvatar?.isEnabled ?? false}\r\n            onDisplayNextBlock={displayNextBlock}\r\n            keepShowingHostAvatar={keepShowingHostAvatar}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\ntype Props = {\r\n  displayChunk: ChatDisplayChunk\r\n  hostAvatar: { isEnabled: boolean; src?: string }\r\n  hasGuestAvatar: boolean\r\n  keepShowingHostAvatar: boolean\r\n  onDisplayNextBlock: (\r\n    answerContent?: InputSubmitContent,\r\n    isRetry?: boolean\r\n  ) => void\r\n}\r\nconst ChatChunks = ({\r\n  displayChunk: { bubbles, input },\r\n  hostAvatar,\r\n  hasGuestAvatar,\r\n  keepShowingHostAvatar,\r\n  onDisplayNextBlock,\r\n}: Props) => {\r\n  const [isSkipped, setIsSkipped] = useState(false)\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  const avatarSideContainerRef = useRef<any>()\r\n\r\n  useEffect(() => {\r\n    refreshTopOffset()\r\n  })\r\n\r\n  const skipInput = () => {\r\n    onDisplayNextBlock()\r\n    setIsSkipped(true)\r\n  }\r\n\r\n  const refreshTopOffset = () =>\r\n    avatarSideContainerRef.current?.refreshTopOffset()\r\n\r\n  return (\r\n    <>\r\n      <div className=\"flex\">\r\n        {hostAvatar.isEnabled && bubbles.length > 0 && (\r\n          <AvatarSideContainer\r\n            ref={avatarSideContainerRef}\r\n            hostAvatarSrc={hostAvatar.src}\r\n            keepShowing={\r\n              (keepShowingHostAvatar || isDefined(input)) && !isSkipped\r\n            }\r\n          />\r\n        )}\r\n        <div\r\n          className=\"flex-1\"\r\n          style={{ marginRight: hasGuestAvatar ? '50px' : '0.5rem' }}\r\n        >\r\n          <TransitionGroup>\r\n            {bubbles.map((block) => (\r\n              <CSSTransition\r\n                key={block.id}\r\n                classNames=\"bubble\"\r\n                timeout={500}\r\n                unmountOnExit\r\n              >\r\n                <HostBubble\r\n                  block={block}\r\n                  onTransitionEnd={() => {\r\n                    onDisplayNextBlock()\r\n                    refreshTopOffset()\r\n                  }}\r\n                />\r\n              </CSSTransition>\r\n            ))}\r\n          </TransitionGroup>\r\n        </div>\r\n      </div>\r\n      {!isSkipped && (\r\n        <CSSTransition\r\n          classNames=\"bubble\"\r\n          timeout={500}\r\n          unmountOnExit\r\n          in={isDefined(input)}\r\n        >\r\n          {input && (\r\n            <InputChatBlock\r\n              block={input}\r\n              onTransitionEnd={onDisplayNextBlock}\r\n              onSkip={skipInput}\r\n              hasAvatar={hostAvatar.isEnabled}\r\n              hasGuestAvatar={hasGuestAvatar}\r\n            />\r\n          )}\r\n        </CSSTransition>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n","import React, {\r\n  ForwardedRef,\r\n  forwardRef,\r\n  useEffect,\r\n  useImperativeHandle,\r\n  useRef,\r\n  useState,\r\n} from 'react'\r\nimport { Avatar } from '../avatars/Avatar'\r\nimport { useFrame } from 'react-frame-component'\r\nimport { CSSTransition } from 'react-transition-group'\r\nimport { ResizeObserver } from 'resize-observer'\r\n\r\ntype Props = { hostAvatarSrc?: string; keepShowing: boolean }\r\n\r\nexport const AvatarSideContainer = forwardRef(\r\n  ({ hostAvatarSrc, keepShowing }: Props, ref: ForwardedRef<unknown>) => {\r\n    const { document } = useFrame()\r\n    const [show, setShow] = useState(false)\r\n    const [avatarTopOffset, setAvatarTopOffset] = useState(0)\r\n\r\n    const refreshTopOffset = () => {\r\n      if (!scrollingSideGroupRef.current || !avatarContainer.current) return\r\n      const { height } = scrollingSideGroupRef.current.getBoundingClientRect()\r\n      const { height: avatarHeight } =\r\n        avatarContainer.current.getBoundingClientRect()\r\n      setAvatarTopOffset(height - avatarHeight)\r\n    }\r\n    const scrollingSideGroupRef = useRef<HTMLDivElement>(null)\r\n    const avatarContainer = useRef<HTMLDivElement>(null)\r\n    useImperativeHandle(ref, () => ({\r\n      refreshTopOffset,\r\n    }))\r\n\r\n    useEffect(() => {\r\n      if (!document) return\r\n      setShow(true)\r\n      const resizeObserver = new ResizeObserver(refreshTopOffset)\r\n      resizeObserver.observe(document.body)\r\n      return () => {\r\n        resizeObserver.disconnect()\r\n      }\r\n      // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [])\r\n\r\n    return (\r\n      <div\r\n        className=\"flex w-6 xs:w-10 mr-2 mb-2 flex-shrink-0 items-center relative typebot-avatar-container \"\r\n        ref={scrollingSideGroupRef}\r\n      >\r\n        <CSSTransition\r\n          classNames=\"bubble\"\r\n          timeout={500}\r\n          in={show && keepShowing}\r\n          unmountOnExit\r\n        >\r\n          <div\r\n            className=\"absolute w-6 xs:w-10 h-6 xs:h-10 mb-4 xs:mb-2 flex items-center top-0\"\r\n            ref={avatarContainer}\r\n            style={{\r\n              top: `${avatarTopOffset}px`,\r\n              transition: 'top 350ms ease-out, opacity 500ms',\r\n            }}\r\n          >\r\n            <Avatar avatarSrc={hostAvatarSrc} />\r\n          </div>\r\n        </CSSTransition>\r\n      </div>\r\n    )\r\n  }\r\n)\r\n","import React, { useState } from 'react'\r\nimport { isDefined } from 'utils'\r\nimport { DefaultAvatar } from './DefaultAvatar'\r\n\r\nexport const Avatar = ({ avatarSrc }: { avatarSrc?: string }): JSX.Element => {\r\n  const [currentAvatarSrc] = useState(avatarSrc)\r\n\r\n  if (currentAvatarSrc === '') return <></>\r\n  if (isDefined(currentAvatarSrc))\r\n    return (\r\n      <figure\r\n        className={\r\n          'flex justify-center items-center rounded-full text-white w-6 h-6 text-sm relative xs:w-10 xs:h-10 xs:text-xl'\r\n        }\r\n      >\r\n        <img\r\n          src={currentAvatarSrc}\r\n          alt=\"Bot avatar\"\r\n          className=\"rounded-full object-cover w-full h-full\"\r\n        />\r\n      </figure>\r\n    )\r\n  return <DefaultAvatar />\r\n}\r\n","import React from 'react'\r\n\r\nexport const DefaultAvatar = (): JSX.Element => {\r\n  return (\r\n    <figure\r\n      className={\r\n        'flex justify-center items-center rounded-full text-white w-6 h-6 text-sm relative xs:w-10 xs:h-10 xs:text-xl'\r\n      }\r\n      data-testid=\"default-avatar\"\r\n    >\r\n      <svg\r\n        width=\"75\"\r\n        height=\"75\"\r\n        viewBox=\"0 0 75 75\"\r\n        fill=\"none\"\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        className={\r\n          'absolute top-0 left-0 w-6 h-6 xs:w-full xs:h-full xs:text-xl'\r\n        }\r\n      >\r\n        <mask id=\"mask0\" x=\"0\" y=\"0\" mask-type=\"alpha\">\r\n          <circle cx=\"37.5\" cy=\"37.5\" r=\"37.5\" fill=\"#0042DA\" />\r\n        </mask>\r\n        <g mask=\"url(#mask0)\">\r\n          <rect x=\"-30\" y=\"-43\" width=\"131\" height=\"154\" fill=\"#0042DA\" />\r\n          <rect\r\n            x=\"2.50413\"\r\n            y=\"120.333\"\r\n            width=\"81.5597\"\r\n            height=\"86.4577\"\r\n            rx=\"2.5\"\r\n            transform=\"rotate(-52.6423 2.50413 120.333)\"\r\n            stroke=\"#FED23D\"\r\n            strokeWidth=\"5\"\r\n          />\r\n          <circle cx=\"76.5\" cy=\"-1.5\" r=\"29\" stroke=\"#FF8E20\" strokeWidth=\"5\" />\r\n          <path\r\n            d=\"M-49.8224 22L-15.5 -40.7879L18.8224 22H-49.8224Z\"\r\n            stroke=\"#F7F8FF\"\r\n            strokeWidth=\"5\"\r\n          />\r\n        </g>\r\n      </svg>\r\n    </figure>\r\n  )\r\n}\r\n","import { TypebotViewerProps } from 'components/TypebotViewer'\r\nimport { LinkedTypebot } from 'contexts/TypebotContext'\r\nimport { Log } from 'db'\r\nimport {\r\n  LogicBlock,\r\n  LogicBlockType,\r\n  LogicalOperator,\r\n  ConditionBlock,\r\n  Variable,\r\n  ComparisonOperators,\r\n  SetVariableBlock,\r\n  RedirectBlock,\r\n  Comparison,\r\n  CodeBlock,\r\n  TypebotLinkBlock,\r\n  PublicTypebot,\r\n  Typebot,\r\n  Edge,\r\n  VariableWithUnknowValue,\r\n} from 'models'\r\nimport { byId, isDefined, isNotDefined, sendRequest } from 'utils'\r\nimport { sanitizeUrl } from './utils'\r\nimport { parseCorrectValueType, parseVariables } from './variable'\r\n\r\ntype EdgeId = string\r\n\r\ntype LogicContext = {\r\n  isPreview: boolean\r\n  apiHost: string\r\n  typebot: TypebotViewerProps['typebot']\r\n  linkedTypebots: LinkedTypebot[]\r\n  currentTypebotId: string\r\n  pushEdgeIdInLinkedTypebotQueue: (bot: {\r\n    edgeId: string\r\n    typebotId: string\r\n  }) => void\r\n  setCurrentTypebotId: (id: string) => void\r\n  updateVariableValue: (variableId: string, value: unknown) => void\r\n  updateVariables: (variables: VariableWithUnknowValue[]) => void\r\n  injectLinkedTypebot: (typebot: Typebot | PublicTypebot) => LinkedTypebot\r\n  onNewLog: (log: Omit<Log, 'id' | 'createdAt' | 'resultId'>) => void\r\n  createEdge: (edge: Edge) => void\r\n}\r\n\r\nexport const executeLogic = async (\r\n  block: LogicBlock,\r\n  context: LogicContext\r\n): Promise<{\r\n  nextEdgeId?: EdgeId\r\n  linkedTypebot?: TypebotViewerProps['typebot'] | LinkedTypebot\r\n}> => {\r\n  switch (block.type) {\r\n    case LogicBlockType.SET_VARIABLE:\r\n      return { nextEdgeId: executeSetVariable(block, context) }\r\n    case LogicBlockType.CONDITION:\r\n      return { nextEdgeId: executeCondition(block, context) }\r\n    case LogicBlockType.REDIRECT:\r\n      return { nextEdgeId: executeRedirect(block, context) }\r\n    case LogicBlockType.CODE:\r\n      return { nextEdgeId: await executeCode(block, context) }\r\n    case LogicBlockType.TYPEBOT_LINK:\r\n      return await executeTypebotLink(block, context)\r\n  }\r\n}\r\n\r\nconst executeSetVariable = (\r\n  block: SetVariableBlock,\r\n  { typebot: { variables }, updateVariableValue, updateVariables }: LogicContext\r\n): EdgeId | undefined => {\r\n  if (!block.options?.variableId) return block.outgoingEdgeId\r\n  const evaluatedExpression = block.options.expressionToEvaluate\r\n    ? evaluateSetVariableExpression(variables)(\r\n        block.options.expressionToEvaluate\r\n      )\r\n    : undefined\r\n  const existingVariable = variables.find(byId(block.options.variableId))\r\n  if (!existingVariable) return block.outgoingEdgeId\r\n  updateVariableValue(existingVariable.id, evaluatedExpression)\r\n  updateVariables([{ ...existingVariable, value: evaluatedExpression }])\r\n  return block.outgoingEdgeId\r\n}\r\n\r\nconst evaluateSetVariableExpression =\r\n  (variables: Variable[]) =>\r\n  (str: string): unknown => {\r\n    const evaluating = parseVariables(variables, { fieldToParse: 'id' })(\r\n      str.includes('return ') ? str : `return ${str}`\r\n    )\r\n    try {\r\n      const func = Function(...variables.map((v) => v.id), evaluating)\r\n      return func(...variables.map((v) => parseCorrectValueType(v.value)))\r\n    } catch (err) {\r\n      console.log(`Evaluating: ${evaluating}`, err)\r\n      return str\r\n    }\r\n  }\r\n\r\nconst executeCondition = (\r\n  block: ConditionBlock,\r\n  { typebot: { variables } }: LogicContext\r\n): EdgeId | undefined => {\r\n  const { content } = block.items[0]\r\n  const isConditionPassed =\r\n    content.logicalOperator === LogicalOperator.AND\r\n      ? content.comparisons.every(executeComparison(variables))\r\n      : content.comparisons.some(executeComparison(variables))\r\n  return isConditionPassed\r\n    ? block.items[0].outgoingEdgeId\r\n    : block.outgoingEdgeId\r\n}\r\n\r\nconst executeComparison =\r\n  (variables: Variable[]) => (comparison: Comparison) => {\r\n    if (!comparison?.variableId) return false\r\n    const inputValue = (\r\n      variables.find((v) => v.id === comparison.variableId)?.value ?? ''\r\n    ).trim()\r\n    const value = parseVariables(variables)(comparison.value).trim()\r\n    if (isNotDefined(value)) return false\r\n    switch (comparison.comparisonOperator) {\r\n      case ComparisonOperators.CONTAINS: {\r\n        return inputValue.toLowerCase().includes(value.toLowerCase())\r\n      }\r\n      case ComparisonOperators.EQUAL: {\r\n        return inputValue === value\r\n      }\r\n      case ComparisonOperators.NOT_EQUAL: {\r\n        return inputValue !== value\r\n      }\r\n      case ComparisonOperators.GREATER: {\r\n        return parseFloat(inputValue) > parseFloat(value)\r\n      }\r\n      case ComparisonOperators.LESS: {\r\n        return parseFloat(inputValue) < parseFloat(value)\r\n      }\r\n      case ComparisonOperators.IS_SET: {\r\n        return isDefined(inputValue) && inputValue.length > 0\r\n      }\r\n    }\r\n  }\r\n\r\nconst executeRedirect = (\r\n  block: RedirectBlock,\r\n  { typebot: { variables } }: LogicContext\r\n): EdgeId | undefined => {\r\n  if (!block.options?.url) return block.outgoingEdgeId\r\n  const formattedUrl = sanitizeUrl(parseVariables(variables)(block.options.url))\r\n  const isEmbedded = window.parent && window.location !== window.top?.location\r\n  if (isEmbedded) {\r\n    if (!block.options.isNewTab)\r\n      return ((window.top as Window).location.href = formattedUrl)\r\n\r\n    try {\r\n      window.open(formattedUrl)\r\n    } catch (err) {\r\n      //Can't access to parent window\r\n      window.top?.postMessage(\r\n        {\r\n          from: 'typebot',\r\n          redirectUrl: formattedUrl,\r\n        },\r\n        '*'\r\n      )\r\n    }\r\n  } else {\r\n    window.open(formattedUrl, block.options.isNewTab ? '_blank' : '_self')\r\n  }\r\n  return block.outgoingEdgeId\r\n}\r\n\r\nconst executeCode = async (\r\n  block: CodeBlock,\r\n  { typebot: { variables } }: LogicContext\r\n) => {\r\n  if (!block.options.content) return\r\n  const func = Function(\r\n    ...variables.map((v) => v.id),\r\n    parseVariables(variables, { fieldToParse: 'id' })(block.options.content)\r\n  )\r\n  try {\r\n    await func(...variables.map((v) => parseCorrectValueType(v.value)))\r\n  } catch (err) {\r\n    console.error(err)\r\n  }\r\n  return block.outgoingEdgeId\r\n}\r\n\r\nconst executeTypebotLink = async (\r\n  block: TypebotLinkBlock,\r\n  context: LogicContext\r\n): Promise<{\r\n  nextEdgeId?: EdgeId\r\n  linkedTypebot?: PublicTypebot | LinkedTypebot\r\n}> => {\r\n  const {\r\n    typebot,\r\n    linkedTypebots,\r\n    onNewLog,\r\n    createEdge,\r\n    setCurrentTypebotId,\r\n    pushEdgeIdInLinkedTypebotQueue,\r\n    currentTypebotId,\r\n  } = context\r\n  const linkedTypebot = (\r\n    block.options.typebotId === 'current'\r\n      ? typebot\r\n      : [typebot, ...linkedTypebots].find(byId(block.options.typebotId)) ??\r\n        (await fetchAndInjectTypebot(block, context))\r\n  ) as PublicTypebot | LinkedTypebot | undefined\r\n  if (!linkedTypebot) {\r\n    onNewLog({\r\n      status: 'error',\r\n      description: 'Failed to link typebot',\r\n      details: '',\r\n    })\r\n    return { nextEdgeId: block.outgoingEdgeId }\r\n  }\r\n  if (block.outgoingEdgeId)\r\n    pushEdgeIdInLinkedTypebotQueue({\r\n      edgeId: block.outgoingEdgeId,\r\n      typebotId: currentTypebotId,\r\n    })\r\n  setCurrentTypebotId(\r\n    'typebotId' in linkedTypebot ? linkedTypebot.typebotId : linkedTypebot.id\r\n  )\r\n  const nextGroupId =\r\n    block.options.groupId ??\r\n    linkedTypebot.groups.find((b) => b.blocks.some((s) => s.type === 'start'))\r\n      ?.id\r\n  if (!nextGroupId) return { nextEdgeId: block.outgoingEdgeId }\r\n  const newEdge: Edge = {\r\n    id: (Math.random() * 1000).toString(),\r\n    from: { blockId: '', groupId: '' },\r\n    to: {\r\n      groupId: nextGroupId,\r\n    },\r\n  }\r\n  createEdge(newEdge)\r\n  return {\r\n    nextEdgeId: newEdge.id,\r\n    linkedTypebot: {\r\n      ...linkedTypebot,\r\n      edges: [...linkedTypebot.edges, newEdge],\r\n    },\r\n  }\r\n}\r\n\r\nconst fetchAndInjectTypebot = async (\r\n  block: TypebotLinkBlock,\r\n  { apiHost, injectLinkedTypebot, isPreview }: LogicContext\r\n): Promise<LinkedTypebot | undefined> => {\r\n  const { data, error } = isPreview\r\n    ? await sendRequest<{ typebot: Typebot }>(\r\n        `/api/typebots/${block.options.typebotId}`\r\n      )\r\n    : await sendRequest<{ typebot: PublicTypebot }>(\r\n        `${apiHost}/api/publicTypebots/${block.options.typebotId}`\r\n      )\r\n  if (!data || error) return\r\n  return injectLinkedTypebot(data.typebot)\r\n}\r\n","export const sanitizeUrl = (url: string): string =>\r\n  url.startsWith('http') ||\r\n  url.startsWith('mailto:') ||\r\n  url.startsWith('tel:') ||\r\n  url.startsWith('sms:')\r\n    ? url\r\n    : `https://${url}`\r\n\r\nexport const isMobile =\r\n  typeof window !== 'undefined' &&\r\n  window.matchMedia('only screen and (max-width: 760px)').matches\r\n","import { Log } from 'db'\r\nimport {\r\n  IntegrationBlock,\r\n  IntegrationBlockType,\r\n  GoogleSheetsBlock,\r\n  GoogleSheetsAction,\r\n  GoogleSheetsInsertRowOptions,\r\n  Variable,\r\n  GoogleSheetsUpdateRowOptions,\r\n  Cell,\r\n  GoogleSheetsGetOptions,\r\n  GoogleAnalyticsBlock,\r\n  WebhookBlock,\r\n  SendEmailBlock,\r\n  ZapierBlock,\r\n  ResultValues,\r\n  Group,\r\n  VariableWithValue,\r\n  MakeComBlock,\r\n  PabblyConnectBlock,\r\n  VariableWithUnknowValue,\r\n} from 'models'\r\nimport { stringify } from 'qs'\r\nimport { byId, sendRequest } from 'utils'\r\nimport { sendGaEvent } from '../../lib/gtag'\r\nimport { parseVariables, parseVariablesInObject } from './variable'\r\n\r\ntype IntegrationContext = {\r\n  apiHost: string\r\n  typebotId: string\r\n  groupId: string\r\n  blockId: string\r\n  isPreview: boolean\r\n  variables: Variable[]\r\n  resultValues: ResultValues\r\n  groups: Group[]\r\n  resultId?: string\r\n  updateVariables: (variables: VariableWithUnknowValue[]) => void\r\n  updateVariableValue: (variableId: string, value: unknown) => void\r\n  onNewLog: (log: Omit<Log, 'id' | 'createdAt' | 'resultId'>) => void\r\n}\r\n\r\nexport const executeIntegration = ({\r\n  block,\r\n  context,\r\n}: {\r\n  block: IntegrationBlock\r\n  context: IntegrationContext\r\n}): Promise<string | undefined> => {\r\n  switch (block.type) {\r\n    case IntegrationBlockType.GOOGLE_SHEETS:\r\n      return executeGoogleSheetIntegration(block, context)\r\n    case IntegrationBlockType.GOOGLE_ANALYTICS:\r\n      return executeGoogleAnalyticsIntegration(block, context)\r\n    case IntegrationBlockType.ZAPIER:\r\n    case IntegrationBlockType.MAKE_COM:\r\n    case IntegrationBlockType.PABBLY_CONNECT:\r\n    case IntegrationBlockType.WEBHOOK:\r\n      return executeWebhook(block, context)\r\n    case IntegrationBlockType.EMAIL:\r\n      return sendEmail(block, context)\r\n  }\r\n}\r\n\r\nexport const executeGoogleAnalyticsIntegration = async (\r\n  block: GoogleAnalyticsBlock,\r\n  { variables }: IntegrationContext\r\n) => {\r\n  if (!block.options?.trackingId) return block.outgoingEdgeId\r\n  const { default: initGoogleAnalytics } = await import('../../lib/gtag')\r\n  await initGoogleAnalytics(block.options.trackingId)\r\n  sendGaEvent(parseVariablesInObject(block.options, variables))\r\n  return block.outgoingEdgeId\r\n}\r\n\r\nconst executeGoogleSheetIntegration = async (\r\n  block: GoogleSheetsBlock,\r\n  context: IntegrationContext\r\n) => {\r\n  if (!('action' in block.options)) return block.outgoingEdgeId\r\n  switch (block.options.action) {\r\n    case GoogleSheetsAction.INSERT_ROW:\r\n      await insertRowInGoogleSheets(block.options, context)\r\n      break\r\n    case GoogleSheetsAction.UPDATE_ROW:\r\n      await updateRowInGoogleSheets(block.options, context)\r\n      break\r\n    case GoogleSheetsAction.GET:\r\n      await getRowFromGoogleSheets(block.options, context)\r\n      break\r\n  }\r\n  return block.outgoingEdgeId\r\n}\r\n\r\nconst insertRowInGoogleSheets = async (\r\n  options: GoogleSheetsInsertRowOptions,\r\n  { variables, apiHost, onNewLog, resultId }: IntegrationContext\r\n) => {\r\n  if (!options.cellsToInsert) {\r\n    onNewLog({\r\n      status: 'warning',\r\n      description: 'Cells to insert are undefined',\r\n      details: null,\r\n    })\r\n    return\r\n  }\r\n  const params = stringify({ resultId })\r\n  const { error } = await sendRequest({\r\n    url: `${apiHost}/api/integrations/google-sheets/spreadsheets/${options.spreadsheetId}/sheets/${options.sheetId}?${params}`,\r\n    method: 'POST',\r\n    body: {\r\n      credentialsId: options.credentialsId,\r\n      values: parseCellValues(options.cellsToInsert, variables),\r\n    },\r\n  })\r\n  onNewLog(\r\n    parseLog(\r\n      error,\r\n      'Succesfully inserted a row in the sheet',\r\n      'Failed to insert a row in the sheet'\r\n    )\r\n  )\r\n}\r\n\r\nconst updateRowInGoogleSheets = async (\r\n  options: GoogleSheetsUpdateRowOptions,\r\n  { variables, apiHost, onNewLog, resultId }: IntegrationContext\r\n) => {\r\n  if (!options.cellsToUpsert || !options.referenceCell) return\r\n  const params = stringify({ resultId })\r\n  const { error } = await sendRequest({\r\n    url: `${apiHost}/api/integrations/google-sheets/spreadsheets/${options.spreadsheetId}/sheets/${options.sheetId}?${params}`,\r\n    method: 'PATCH',\r\n    body: {\r\n      credentialsId: options.credentialsId,\r\n      values: parseCellValues(options.cellsToUpsert, variables),\r\n      referenceCell: {\r\n        column: options.referenceCell.column,\r\n        value: parseVariables(variables)(options.referenceCell.value ?? ''),\r\n      },\r\n    },\r\n  })\r\n  onNewLog(\r\n    parseLog(\r\n      error,\r\n      'Succesfully updated a row in the sheet',\r\n      'Failed to update a row in the sheet'\r\n    )\r\n  )\r\n}\r\n\r\nconst getRowFromGoogleSheets = async (\r\n  options: GoogleSheetsGetOptions,\r\n  {\r\n    variables,\r\n    updateVariableValue,\r\n    updateVariables,\r\n    apiHost,\r\n    onNewLog,\r\n    resultId,\r\n  }: IntegrationContext\r\n) => {\r\n  if (!options.referenceCell || !options.cellsToExtract) return\r\n  const queryParams = stringify(\r\n    {\r\n      credentialsId: options.credentialsId,\r\n      referenceCell: {\r\n        column: options.referenceCell.column,\r\n        value: parseVariables(variables)(options.referenceCell.value ?? ''),\r\n      },\r\n      columns: options.cellsToExtract.map((cell) => cell.column),\r\n      resultId,\r\n    },\r\n    { indices: false }\r\n  )\r\n  const { data, error } = await sendRequest<{ [key: string]: string }>({\r\n    url: `${apiHost}/api/integrations/google-sheets/spreadsheets/${options.spreadsheetId}/sheets/${options.sheetId}?${queryParams}`,\r\n    method: 'GET',\r\n  })\r\n  onNewLog(\r\n    parseLog(\r\n      error,\r\n      'Succesfully fetched data from sheet',\r\n      'Failed to fetch data from sheet'\r\n    )\r\n  )\r\n  if (!data) return\r\n  const newVariables = options.cellsToExtract.reduce<VariableWithValue[]>(\r\n    (newVariables, cell) => {\r\n      const existingVariable = variables.find(byId(cell.variableId))\r\n      const value = data[cell.column ?? '']\r\n      if (!existingVariable || !value) return newVariables\r\n      updateVariableValue(existingVariable.id, value)\r\n      return [\r\n        ...newVariables,\r\n        {\r\n          ...existingVariable,\r\n          value,\r\n        },\r\n      ]\r\n    },\r\n    []\r\n  )\r\n  updateVariables(newVariables)\r\n}\r\nconst parseCellValues = (\r\n  cells: Cell[],\r\n  variables: Variable[]\r\n): { [key: string]: string } =>\r\n  cells.reduce((row, cell) => {\r\n    return !cell.column || !cell.value\r\n      ? row\r\n      : {\r\n          ...row,\r\n          [cell.column]: parseVariables(variables)(cell.value),\r\n        }\r\n  }, {})\r\n\r\nconst executeWebhook = async (\r\n  block: WebhookBlock | ZapierBlock | MakeComBlock | PabblyConnectBlock,\r\n  {\r\n    blockId,\r\n    variables,\r\n    updateVariableValue,\r\n    updateVariables,\r\n    typebotId,\r\n    apiHost,\r\n    resultValues,\r\n    onNewLog,\r\n    resultId,\r\n  }: IntegrationContext\r\n) => {\r\n  const params = stringify({ resultId })\r\n  const { data, error } = await sendRequest({\r\n    url: `${apiHost}/api/typebots/${typebotId}/blocks/${blockId}/executeWebhook?${params}`,\r\n    method: 'POST',\r\n    body: {\r\n      variables,\r\n      resultValues,\r\n    },\r\n  })\r\n  const statusCode = (\r\n    data as Record<string, string> | undefined\r\n  )?.statusCode.toString()\r\n  const isError = statusCode\r\n    ? statusCode?.startsWith('4') || statusCode?.startsWith('5')\r\n    : true\r\n  onNewLog({\r\n    status: error ? 'error' : isError ? 'warning' : 'success',\r\n    description: isError\r\n      ? 'Webhook returned an error'\r\n      : 'Webhook successfuly executed',\r\n    details: JSON.stringify(error ?? data, null, 2).substring(0, 1000),\r\n  })\r\n  const newVariables = block.options.responseVariableMapping.reduce<\r\n    VariableWithUnknowValue[]\r\n  >((newVariables, varMapping) => {\r\n    if (!varMapping?.bodyPath || !varMapping.variableId) return newVariables\r\n    const existingVariable = variables.find(byId(varMapping.variableId))\r\n    if (!existingVariable) return newVariables\r\n    const func = Function(\r\n      'data',\r\n      `return data.${parseVariables(variables)(varMapping?.bodyPath)}`\r\n    )\r\n    try {\r\n      const value: unknown = func(data)\r\n      updateVariableValue(existingVariable?.id, value)\r\n      return [...newVariables, { ...existingVariable, value }]\r\n    } catch (err) {\r\n      return newVariables\r\n    }\r\n  }, [])\r\n  updateVariables(newVariables)\r\n  return block.outgoingEdgeId\r\n}\r\n\r\nconst sendEmail = async (\r\n  block: SendEmailBlock,\r\n  {\r\n    variables,\r\n    apiHost,\r\n    isPreview,\r\n    onNewLog,\r\n    resultId,\r\n    typebotId,\r\n    resultValues,\r\n  }: IntegrationContext\r\n) => {\r\n  if (isPreview) {\r\n    onNewLog({\r\n      status: 'info',\r\n      description: 'Emails are not sent in preview mode',\r\n      details: null,\r\n    })\r\n    return block.outgoingEdgeId\r\n  }\r\n  const { options } = block\r\n  const { error } = await sendRequest({\r\n    url: `${apiHost}/api/typebots/${typebotId}/integrations/email?resultId=${resultId}`,\r\n    method: 'POST',\r\n    body: {\r\n      credentialsId: options.credentialsId,\r\n      recipients: options.recipients.map(parseVariables(variables)),\r\n      subject: parseVariables(variables)(options.subject ?? ''),\r\n      body: parseVariables(variables)(options.body ?? ''),\r\n      cc: (options.cc ?? []).map(parseVariables(variables)),\r\n      bcc: (options.bcc ?? []).map(parseVariables(variables)),\r\n      replyTo: options.replyTo\r\n        ? parseVariables(variables)(options.replyTo)\r\n        : undefined,\r\n      fileUrls: variables.find(byId(options.attachmentsVariableId))?.value,\r\n      isCustomBody: options.isCustomBody,\r\n      isBodyCode: options.isBodyCode,\r\n      resultValues,\r\n    },\r\n  })\r\n  onNewLog(\r\n    parseLog(error, 'Succesfully sent an email', 'Failed to send an email')\r\n  )\r\n  return block.outgoingEdgeId\r\n}\r\n\r\nconst parseLog = (\r\n  error: Error | undefined,\r\n  successMessage: string,\r\n  errorMessage: string\r\n): Omit<Log, 'id' | 'createdAt' | 'resultId'> => ({\r\n  status: error ? 'error' : 'success',\r\n  description: error ? errorMessage : successMessage,\r\n  details: (error && JSON.stringify(error, null, 2).substring(0, 1000)) ?? null,\r\n})\r\n","import {\r\n  BubbleBlock,\r\n  BubbleBlockType,\r\n  Edge,\r\n  EmailInputBlock,\r\n  InputBlockType,\r\n  PhoneNumberInputBlock,\r\n  Block,\r\n  UrlInputBlock,\r\n  Variable,\r\n} from 'models'\r\nimport { isPossiblePhoneNumber } from 'react-phone-number-input'\r\nimport { isInputBlock } from 'utils'\r\nimport { parseVariables } from './variable'\r\n\r\nconst emailRegex =\r\n  /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\r\nconst urlRegex =\r\n  /^(https?:\\/\\/(?:www\\.|(?!www))[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|www\\.[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|https?:\\/\\/(?:www\\.|(?!www))[a-zA-Z0-9]+\\.[^\\s]{2,}|www\\.[a-zA-Z0-9]+\\.[^\\s]{2,})$/\r\n\r\nexport const isInputValid = (\r\n  inputValue: string,\r\n  type: InputBlockType\r\n): boolean => {\r\n  switch (type) {\r\n    case InputBlockType.EMAIL:\r\n      return emailRegex.test(inputValue)\r\n    case InputBlockType.PHONE:\r\n      return isPossiblePhoneNumber(inputValue)\r\n    case InputBlockType.URL:\r\n      return urlRegex.test(inputValue)\r\n  }\r\n  return true\r\n}\r\n\r\nexport const blockCanBeRetried = (\r\n  block: Block\r\n): block is EmailInputBlock | UrlInputBlock | PhoneNumberInputBlock =>\r\n  isInputBlock(block) && 'retryMessageContent' in block.options\r\n\r\nexport const parseRetryBlock = (\r\n  block: EmailInputBlock | UrlInputBlock | PhoneNumberInputBlock,\r\n  variables: Variable[],\r\n  createEdge: (edge: Edge) => void\r\n): BubbleBlock => {\r\n  const content = parseVariables(variables)(block.options.retryMessageContent)\r\n  const newBlockId = block.id + Math.random() * 1000\r\n  const newEdge: Edge = {\r\n    id: (Math.random() * 1000).toString(),\r\n    from: { blockId: newBlockId, groupId: block.groupId },\r\n    to: { groupId: block.groupId, blockId: block.id },\r\n  }\r\n  createEdge(newEdge)\r\n  return {\r\n    groupId: block.groupId,\r\n    id: newBlockId,\r\n    type: BubbleBlockType.TEXT,\r\n    content: {\r\n      html: `<div>${content}</div>`,\r\n      richText: [],\r\n      plainText: content,\r\n    },\r\n    outgoingEdgeId: newEdge.id,\r\n  }\r\n}\r\n\r\nexport const parseReadableDate = ({\r\n  from,\r\n  to,\r\n  hasTime,\r\n  isRange,\r\n}: {\r\n  from: string\r\n  to: string\r\n  hasTime?: boolean\r\n  isRange?: boolean\r\n}) => {\r\n  const currentLocale = window.navigator.language\r\n  const formatOptions: Intl.DateTimeFormatOptions = {\r\n    day: '2-digit',\r\n    month: '2-digit',\r\n    year: 'numeric',\r\n    hour: hasTime ? '2-digit' : undefined,\r\n    minute: hasTime ? '2-digit' : undefined,\r\n  }\r\n  const fromReadable = new Date(from).toLocaleString(\r\n    currentLocale,\r\n    formatOptions\r\n  )\r\n  const toReadable = new Date(to).toLocaleString(currentLocale, formatOptions)\r\n  return `${fromReadable}${isRange ? ` to ${toReadable}` : ''}`\r\n}\r\n","import {\r\n  Answer,\r\n  ResultValues,\r\n  VariableWithUnknowValue,\r\n  VariableWithValue,\r\n} from 'models'\r\nimport React, { createContext, ReactNode, useContext, useState } from 'react'\r\nimport { safeStringify } from 'services/variable'\r\n\r\nconst answersContext = createContext<{\r\n  resultId?: string\r\n  resultValues: ResultValues\r\n  addAnswer: (\r\n    answer: Answer & { uploadedFiles: boolean }\r\n  ) => Promise<void> | undefined\r\n  updateVariables: (variables: VariableWithUnknowValue[]) => void\r\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n  //@ts-ignore\r\n}>({})\r\n\r\nexport const AnswersContext = ({\r\n  children,\r\n  resultId,\r\n  onNewAnswer,\r\n  onVariablesUpdated,\r\n}: {\r\n  resultId?: string\r\n  onNewAnswer: (\r\n    answer: Answer & { uploadedFiles: boolean }\r\n  ) => Promise<void> | undefined\r\n  onVariablesUpdated?: (variables: VariableWithValue[]) => void\r\n  children: ReactNode\r\n}) => {\r\n  const [resultValues, setResultValues] = useState<ResultValues>({\r\n    answers: [],\r\n    variables: [],\r\n    createdAt: new Date().toISOString(),\r\n  })\r\n\r\n  const addAnswer = (answer: Answer & { uploadedFiles: boolean }) => {\r\n    setResultValues((resultValues) => ({\r\n      ...resultValues,\r\n      answers: [...resultValues.answers, answer],\r\n    }))\r\n    return onNewAnswer && onNewAnswer(answer)\r\n  }\r\n\r\n  const updateVariables = (newVariables: VariableWithUnknowValue[]) => {\r\n    const serializedNewVariables = newVariables.map((variable) => ({\r\n      ...variable,\r\n      value: safeStringify(variable.value),\r\n    })) as VariableWithValue[]\r\n\r\n    setResultValues((resultValues) => {\r\n      const updatedVariables = [\r\n        ...resultValues.variables.filter((v) =>\r\n          serializedNewVariables.every((variable) => variable.id !== v.id)\r\n        ),\r\n        ...serializedNewVariables,\r\n      ]\r\n      if (onVariablesUpdated) onVariablesUpdated(updatedVariables)\r\n      return {\r\n        ...resultValues,\r\n        variables: updatedVariables,\r\n      }\r\n    })\r\n  }\r\n\r\n  return (\r\n    <answersContext.Provider\r\n      value={{\r\n        resultId,\r\n        resultValues,\r\n        addAnswer,\r\n        updateVariables,\r\n      }}\r\n    >\r\n      {children}\r\n    </answersContext.Provider>\r\n  )\r\n}\r\n\r\nexport const useAnswers = () => useContext(answersContext)\r\n","import React, { createContext, ReactNode, useContext } from 'react'\r\n\r\nconst chatContext = createContext<{\r\n  scroll: () => void\r\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n  //@ts-ignore\r\n}>({})\r\n\r\nexport const ChatContext = ({\r\n  children,\r\n  onScroll,\r\n}: {\r\n  children: ReactNode\r\n  onScroll: () => void\r\n}) => {\r\n  const scroll = onScroll\r\n  return (\r\n    <chatContext.Provider\r\n      value={{\r\n        scroll,\r\n      }}\r\n    >\r\n      {children}\r\n    </chatContext.Provider>\r\n  )\r\n}\r\n\r\nexport const useChat = () => useContext(chatContext)\r\n","import {\r\n  BubbleBlock,\r\n  BubbleBlockType,\r\n  InputBlock,\r\n  InputBlockType,\r\n  Block,\r\n  TypingEmulation,\r\n} from 'models'\r\nimport { isBubbleBlock, isInputBlock } from 'utils'\r\n\r\nexport const computeTypingTimeout = (\r\n  bubbleContent: string,\r\n  typingSettings: TypingEmulation\r\n) => {\r\n  let wordCount = bubbleContent.match(/(\\w+)/g)?.length ?? 0\r\n  if (wordCount === 0) wordCount = bubbleContent.length\r\n  const typedWordsPerMinute = typingSettings.speed\r\n  let typingTimeout = typingSettings.enabled\r\n    ? (wordCount / typedWordsPerMinute) * 60000\r\n    : 0\r\n  if (typingTimeout > typingSettings.maxDelay * 1000)\r\n    typingTimeout = typingSettings.maxDelay * 1000\r\n  return typingTimeout\r\n}\r\n\r\nexport const getLastChatBlockType = (\r\n  blocks: Block[]\r\n): BubbleBlockType | InputBlockType | undefined => {\r\n  const displayedBlocks = blocks.filter(\r\n    (s) => isBubbleBlock(s) || isInputBlock(s)\r\n  ) as (BubbleBlock | InputBlock)[]\r\n  return displayedBlocks.pop()?.type\r\n}\r\n","import { BubbleBlock, BubbleBlockType } from 'models'\r\nimport React from 'react'\r\nimport { EmbedBubble } from './EmbedBubble'\r\nimport { ImageBubble } from './ImageBubble'\r\nimport { TextBubble } from './TextBubble'\r\nimport { VideoBubble } from './VideoBubble'\r\n\r\ntype Props = {\r\n  block: BubbleBlock\r\n  onTransitionEnd: () => void\r\n}\r\n\r\nexport const HostBubble = ({ block, onTransitionEnd }: Props) => {\r\n  switch (block.type) {\r\n    case BubbleBlockType.TEXT:\r\n      return <TextBubble block={block} onTransitionEnd={onTransitionEnd} />\r\n    case BubbleBlockType.IMAGE:\r\n      return <ImageBubble block={block} onTransitionEnd={onTransitionEnd} />\r\n    case BubbleBlockType.VIDEO:\r\n      return <VideoBubble block={block} onTransitionEnd={onTransitionEnd} />\r\n    case BubbleBlockType.EMBED:\r\n      return <EmbedBubble block={block} onTransitionEnd={onTransitionEnd} />\r\n  }\r\n}\r\n","import React, { useEffect, useMemo, useRef, useState } from 'react'\r\nimport { EmbedBubbleBlock } from 'models'\r\nimport { TypingContent } from './TypingContent'\r\nimport { parseVariables } from 'services/variable'\r\nimport { useTypebot } from 'contexts/TypebotContext'\r\n\r\ntype Props = {\r\n  block: EmbedBubbleBlock\r\n  onTransitionEnd: () => void\r\n}\r\n\r\nexport const showAnimationDuration = 400\r\n\r\nexport const EmbedBubble = ({ block, onTransitionEnd }: Props) => {\r\n  const { typebot, isLoading } = useTypebot()\r\n  const messageContainer = useRef<HTMLDivElement | null>(null)\r\n  const [isTyping, setIsTyping] = useState(true)\r\n\r\n  const url = useMemo(\r\n    () => parseVariables(typebot.variables)(block.content?.url),\r\n    [block.content?.url, typebot.variables]\r\n  )\r\n\r\n  useEffect(() => {\r\n    if (!isTyping || isLoading) return\r\n    showContentAfterMediaLoad()\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [isLoading])\r\n\r\n  const showContentAfterMediaLoad = () => {\r\n    setTimeout(() => {\r\n      setIsTyping(false)\r\n      onTypingEnd()\r\n    }, 1000)\r\n  }\r\n\r\n  const onTypingEnd = () => {\r\n    setIsTyping(false)\r\n    setTimeout(() => {\r\n      onTransitionEnd()\r\n    }, showAnimationDuration)\r\n  }\r\n\r\n  return (\r\n    <div className=\"flex flex-col w-full\" ref={messageContainer}>\r\n      <div className=\"flex mb-2 w-full lg:w-11/12 items-center\">\r\n        <div\r\n          className={\r\n            'flex relative z-10 items-start typebot-host-bubble w-full'\r\n          }\r\n        >\r\n          <div\r\n            className=\"flex items-center absolute px-4 py-2 rounded-lg bubble-typing z-10 \"\r\n            style={{\r\n              width: isTyping ? '4rem' : '100%',\r\n              height: isTyping ? '2rem' : '100%',\r\n            }}\r\n          >\r\n            {isTyping ? <TypingContent /> : <></>}\r\n          </div>\r\n          <iframe\r\n            id=\"embed-bubble-content\"\r\n            src={url}\r\n            className={\r\n              'w-full z-20 p-4 content-opacity ' +\r\n              (isTyping ? 'opacity-0' : 'opacity-100')\r\n            }\r\n            style={{\r\n              height: isTyping ? '2rem' : block.content.height,\r\n              borderRadius: '15px',\r\n            }}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nexport const TypingContent = (): JSX.Element => (\r\n  <div className=\"flex items-center\">\r\n    <div className=\"w-2 h-2 mr-1 rounded-full bubble1\" />\r\n    <div className=\"w-2 h-2 mr-1 rounded-full bubble2\" />\r\n    <div className=\"w-2 h-2 rounded-full bubble3\" />\r\n  </div>\r\n)\r\n","import React, { useEffect, useMemo, useRef, useState } from 'react'\r\nimport { useTypebot } from 'contexts/TypebotContext'\r\nimport { ImageBubbleBlock } from 'models'\r\nimport { TypingContent } from './TypingContent'\r\nimport { parseVariables } from 'services/variable'\r\n\r\ntype Props = {\r\n  block: ImageBubbleBlock\r\n  onTransitionEnd: () => void\r\n}\r\n\r\nexport const showAnimationDuration = 400\r\n\r\nexport const mediaLoadingFallbackTimeout = 5000\r\n\r\nexport const ImageBubble = ({ block, onTransitionEnd }: Props) => {\r\n  const { typebot, isLoading } = useTypebot()\r\n  const messageContainer = useRef<HTMLDivElement | null>(null)\r\n  const image = useRef<HTMLImageElement | null>(null)\r\n  const [isTyping, setIsTyping] = useState(true)\r\n\r\n  const url = useMemo(\r\n    () => parseVariables(typebot.variables)(block.content?.url),\r\n    [block.content?.url, typebot.variables]\r\n  )\r\n\r\n  useEffect(() => {\r\n    if (!isTyping || isLoading) return\r\n    showContentAfterMediaLoad()\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [isLoading])\r\n\r\n  const showContentAfterMediaLoad = () => {\r\n    if (!image.current) return\r\n    const timeout = setTimeout(() => {\r\n      setIsTyping(false)\r\n      onTypingEnd()\r\n    }, mediaLoadingFallbackTimeout)\r\n    image.current.onload = () => {\r\n      clearTimeout(timeout)\r\n      setIsTyping(false)\r\n      onTypingEnd()\r\n    }\r\n  }\r\n\r\n  const onTypingEnd = () => {\r\n    setIsTyping(false)\r\n    setTimeout(() => {\r\n      onTransitionEnd()\r\n    }, showAnimationDuration)\r\n  }\r\n\r\n  return (\r\n    <div className=\"flex flex-col\" ref={messageContainer}>\r\n      <div className=\"flex mb-2 w-full lg:w-11/12 items-center\">\r\n        <div className={'flex relative z-10 items-start typebot-host-bubble'}>\r\n          <div\r\n            className=\"flex items-center absolute px-4 py-2 rounded-lg bubble-typing z-10 \"\r\n            style={{\r\n              width: isTyping ? '4rem' : '100%',\r\n              height: isTyping ? '2rem' : '100%',\r\n            }}\r\n          >\r\n            {isTyping ? <TypingContent /> : <></>}\r\n          </div>\r\n          <img\r\n            ref={image}\r\n            src={url}\r\n            className={\r\n              'p-4 content-opacity z-10 w-auto rounded-lg ' +\r\n              (isTyping ? 'opacity-0' : 'opacity-100')\r\n            }\r\n            style={{\r\n              maxHeight: '32rem',\r\n              height: isTyping ? '2rem' : 'auto',\r\n              maxWidth: '100%',\r\n            }}\r\n            alt=\"Bubble image\"\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useEffect, useRef, useState } from 'react'\r\nimport { useTypebot } from 'contexts/TypebotContext'\r\nimport { BubbleBlockType, TextBubbleBlock } from 'models'\r\nimport { computeTypingTimeout } from 'services/chat'\r\nimport { TypingContent } from './TypingContent'\r\nimport { parseVariables } from 'services/variable'\r\n\r\ntype Props = {\r\n  block: TextBubbleBlock\r\n  onTransitionEnd: () => void\r\n}\r\n\r\nexport const showAnimationDuration = 400\r\n\r\nconst defaultTypingEmulation = {\r\n  enabled: true,\r\n  speed: 300,\r\n  maxDelay: 1.5,\r\n}\r\n\r\nexport const TextBubble = ({ block, onTransitionEnd }: Props) => {\r\n  const { typebot, isLoading } = useTypebot()\r\n  const messageContainer = useRef<HTMLDivElement | null>(null)\r\n  const [isTyping, setIsTyping] = useState(true)\r\n\r\n  const [content] = useState(\r\n    parseVariables(typebot.variables)(block.content.html)\r\n  )\r\n\r\n  useEffect(() => {\r\n    if (!isTyping || isLoading) return\r\n    const typingTimeout = computeTypingTimeout(\r\n      block.content.plainText,\r\n      typebot.settings?.typingEmulation ?? defaultTypingEmulation\r\n    )\r\n    setTimeout(() => {\r\n      onTypingEnd()\r\n    }, typingTimeout)\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [isLoading])\r\n\r\n  const onTypingEnd = () => {\r\n    setIsTyping(false)\r\n    setTimeout(() => {\r\n      onTransitionEnd()\r\n    }, showAnimationDuration)\r\n  }\r\n\r\n  return (\r\n    <div className=\"flex flex-col\" ref={messageContainer}>\r\n      <div className=\"flex mb-2 w-full items-center\">\r\n        <div className={'flex relative items-start typebot-host-bubble'}>\r\n          <div\r\n            className=\"flex items-center absolute px-4 py-2 rounded-lg bubble-typing \"\r\n            style={{\r\n              width: isTyping ? '4rem' : '100%',\r\n              height: isTyping ? '2rem' : '100%',\r\n            }}\r\n            data-testid=\"host-bubble\"\r\n          >\r\n            {isTyping ? <TypingContent /> : <></>}\r\n          </div>\r\n          {block.type === BubbleBlockType.TEXT && (\r\n            <p\r\n              style={{\r\n                textOverflow: 'ellipsis',\r\n              }}\r\n              className={\r\n                'overflow-hidden content-opacity mx-4 my-2 whitespace-pre-wrap slate-html-container relative ' +\r\n                (isTyping ? 'opacity-0 h-6' : 'opacity-100 h-full')\r\n              }\r\n              dangerouslySetInnerHTML={{\r\n                __html: content,\r\n              }}\r\n            />\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useEffect, useMemo, useRef, useState } from 'react'\r\nimport { useTypebot } from 'contexts/TypebotContext'\r\nimport {\r\n  Variable,\r\n  VideoBubbleContent,\r\n  VideoBubbleContentType,\r\n  VideoBubbleBlock,\r\n} from 'models'\r\nimport { TypingContent } from './TypingContent'\r\nimport { parseVariables } from 'services/variable'\r\n\r\ntype Props = {\r\n  block: VideoBubbleBlock\r\n  onTransitionEnd: () => void\r\n}\r\n\r\nexport const showAnimationDuration = 400\r\n\r\nexport const mediaLoadingFallbackTimeout = 5000\r\n\r\nexport const VideoBubble = ({ block, onTransitionEnd }: Props) => {\r\n  const { typebot, isLoading } = useTypebot()\r\n  const messageContainer = useRef<HTMLDivElement | null>(null)\r\n  const [isTyping, setIsTyping] = useState(true)\r\n\r\n  useEffect(() => {\r\n    if (!isTyping || isLoading) return\r\n    showContentAfterMediaLoad()\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [isLoading])\r\n\r\n  const showContentAfterMediaLoad = () => {\r\n    setTimeout(() => {\r\n      setIsTyping(false)\r\n      onTypingEnd()\r\n    }, 1000)\r\n  }\r\n\r\n  const onTypingEnd = () => {\r\n    setIsTyping(false)\r\n    setTimeout(() => {\r\n      onTransitionEnd()\r\n    }, showAnimationDuration)\r\n  }\r\n\r\n  return (\r\n    <div className=\"flex flex-col\" ref={messageContainer}>\r\n      <div className=\"flex mb-2 w-full lg:w-11/12 items-center\">\r\n        <div className={'flex relative z-10 items-start typebot-host-bubble'}>\r\n          <div\r\n            className=\"flex items-center absolute px-4 py-2 rounded-lg bubble-typing z-10 \"\r\n            style={{\r\n              width: isTyping ? '4rem' : '100%',\r\n              height: isTyping ? '2rem' : '100%',\r\n            }}\r\n          >\r\n            {isTyping ? <TypingContent /> : <></>}\r\n          </div>\r\n          <VideoContent\r\n            content={block.content}\r\n            isTyping={isTyping}\r\n            variables={typebot.variables}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst VideoContent = ({\r\n  content,\r\n  isTyping,\r\n  variables,\r\n}: {\r\n  content?: VideoBubbleContent\r\n  isTyping: boolean\r\n  variables: Variable[]\r\n}) => {\r\n  const url = useMemo(\r\n    () => parseVariables(variables)(content?.url),\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    [variables]\r\n  )\r\n  if (!content?.type) return <></>\r\n  switch (content.type) {\r\n    case VideoBubbleContentType.URL:\r\n      const isSafariBrowser = window.navigator.vendor.match(/apple/i)\r\n      return (\r\n        <video\r\n          controls\r\n          className={\r\n            'p-4 focus:outline-none w-full z-10 content-opacity rounded-md ' +\r\n            (isTyping ? 'opacity-0' : 'opacity-100')\r\n          }\r\n          style={{\r\n            height: isTyping ? '2rem' : 'auto',\r\n            maxHeight: isSafariBrowser ? '40vh' : '',\r\n          }}\r\n          autoPlay\r\n        >\r\n          <source src={url} type=\"video/mp4\" />\r\n          Sorry, your browser doesn&apos;t support embedded videos.\r\n        </video>\r\n      )\r\n    case VideoBubbleContentType.VIMEO:\r\n    case VideoBubbleContentType.YOUTUBE: {\r\n      const baseUrl =\r\n        content.type === VideoBubbleContentType.VIMEO\r\n          ? 'https://player.vimeo.com/video'\r\n          : 'https://www.youtube.com/embed'\r\n      return (\r\n        <iframe\r\n          src={`${baseUrl}/${content.id}`}\r\n          className={\r\n            'w-full p-4 content-opacity z-10 rounded-md ' +\r\n            (isTyping ? 'opacity-0' : 'opacity-100')\r\n          }\r\n          height={isTyping ? '2rem' : '200px'}\r\n          allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\r\n          allowFullScreen\r\n        />\r\n      )\r\n    }\r\n  }\r\n}\r\n","import React, { useState } from 'react'\r\nimport { useAnswers } from '../../../contexts/AnswersContext'\r\nimport { InputBlock, InputBlockType } from 'models'\r\nimport { GuestBubble } from './bubbles/GuestBubble'\r\nimport { TextForm } from './inputs/TextForm'\r\nimport { byId } from 'utils'\r\nimport { DateForm } from './inputs/DateForm'\r\nimport { ChoiceForm } from './inputs/ChoiceForm'\r\nimport { useTypebot } from 'contexts/TypebotContext'\r\nimport { parseVariables } from '../../../services/variable'\r\nimport { isInputValid } from 'services/inputs'\r\nimport { PaymentForm } from './inputs/PaymentForm'\r\nimport { RatingForm } from './inputs/RatingForm'\r\nimport { FileUploadForm } from './inputs/FileUploadForm'\r\n\r\nexport type InputSubmitContent = {\r\n  label?: string\r\n  value: string\r\n  itemId?: string\r\n}\r\n\r\nexport const InputChatBlock = ({\r\n  block,\r\n  hasAvatar,\r\n  hasGuestAvatar,\r\n  onTransitionEnd,\r\n  onSkip,\r\n}: {\r\n  block: InputBlock\r\n  hasGuestAvatar: boolean\r\n  hasAvatar: boolean\r\n  onTransitionEnd: (\r\n    answerContent?: InputSubmitContent,\r\n    isRetry?: boolean\r\n  ) => void\r\n  onSkip: () => void\r\n}) => {\r\n  const { typebot } = useTypebot()\r\n  const { addAnswer } = useAnswers()\r\n  const [answer, setAnswer] = useState<string>()\r\n  const [isEditting, setIsEditting] = useState(false)\r\n\r\n  const { variableId } = block.options\r\n  const defaultValue =\r\n    typebot.settings.general.isInputPrefillEnabled ?? true\r\n      ? variableId && typebot.variables.find(byId(variableId))?.value\r\n      : undefined\r\n\r\n  const handleSubmit = async ({ label, value, itemId }: InputSubmitContent) => {\r\n    setAnswer(label ?? value)\r\n    const isRetry = !isInputValid(value, block.type)\r\n    if (!isRetry && addAnswer)\r\n      await addAnswer({\r\n        blockId: block.id,\r\n        groupId: block.groupId,\r\n        content: value,\r\n        variableId: variableId ?? null,\r\n        uploadedFiles: block.type === InputBlockType.FILE,\r\n      })\r\n    if (!isEditting) onTransitionEnd({ label, value, itemId }, isRetry)\r\n    setIsEditting(false)\r\n  }\r\n\r\n  const handleGuestBubbleClick = () => {\r\n    setAnswer(undefined)\r\n    setIsEditting(true)\r\n  }\r\n\r\n  if (answer) {\r\n    const avatarUrl = typebot.theme.chat.guestAvatar?.url\r\n    return (\r\n      <GuestBubble\r\n        message={answer}\r\n        showAvatar={typebot.theme.chat.guestAvatar?.isEnabled ?? false}\r\n        avatarSrc={avatarUrl && parseVariables(typebot.variables)(avatarUrl)}\r\n        onClick={handleGuestBubbleClick}\r\n      />\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className=\"flex justify-end\">\r\n      {hasAvatar && (\r\n        <div className=\"flex w-6 xs:w-10 h-6 xs:h-10 mr-2 mb-2 mt-1 flex-shrink-0 items-center\" />\r\n      )}\r\n      <Input\r\n        block={block}\r\n        onSubmit={handleSubmit}\r\n        onSkip={onSkip}\r\n        defaultValue={defaultValue?.toString()}\r\n        hasGuestAvatar={hasGuestAvatar}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Input = ({\r\n  block,\r\n  onSubmit,\r\n  onSkip,\r\n  defaultValue,\r\n  hasGuestAvatar,\r\n}: {\r\n  block: InputBlock\r\n  onSubmit: (value: InputSubmitContent) => void\r\n  onSkip: () => void\r\n  defaultValue?: string\r\n  hasGuestAvatar: boolean\r\n}) => {\r\n  switch (block.type) {\r\n    case InputBlockType.TEXT:\r\n    case InputBlockType.NUMBER:\r\n    case InputBlockType.EMAIL:\r\n    case InputBlockType.URL:\r\n    case InputBlockType.PHONE:\r\n      return (\r\n        <TextForm\r\n          block={block}\r\n          onSubmit={onSubmit}\r\n          defaultValue={defaultValue}\r\n          hasGuestAvatar={hasGuestAvatar}\r\n        />\r\n      )\r\n    case InputBlockType.DATE:\r\n      return <DateForm options={block.options} onSubmit={onSubmit} />\r\n    case InputBlockType.CHOICE:\r\n      return <ChoiceForm block={block} onSubmit={onSubmit} />\r\n    case InputBlockType.PAYMENT:\r\n      return (\r\n        <PaymentForm\r\n          options={block.options}\r\n          onSuccess={() =>\r\n            onSubmit({ value: block.options.labels.success ?? 'Success' })\r\n          }\r\n        />\r\n      )\r\n    case InputBlockType.RATING:\r\n      return <RatingForm block={block} onSubmit={onSubmit} />\r\n    case InputBlockType.FILE:\r\n      return (\r\n        <FileUploadForm block={block} onSubmit={onSubmit} onSkip={onSkip} />\r\n      )\r\n  }\r\n}\r\n","import { Avatar } from 'components/avatars/Avatar'\r\nimport React, { useState } from 'react'\r\nimport { CSSTransition } from 'react-transition-group'\r\n\r\ninterface Props {\r\n  message: string\r\n  showAvatar: boolean\r\n  avatarSrc?: string\r\n  onClick: () => void\r\n}\r\n\r\nexport const GuestBubble = ({\r\n  message,\r\n  showAvatar,\r\n  avatarSrc,\r\n  onClick,\r\n}: Props): JSX.Element => {\r\n  const [content] = useState(message)\r\n  const [isDragging, setIsDragging] = useState(false)\r\n\r\n  const handleMouseDown = () => setIsDragging(false)\r\n  const handleMouseMove = () => setIsDragging(true)\r\n  const handleMouseUp = () => {\r\n    setIsDragging(false)\r\n    if (isDragging) return\r\n    onClick()\r\n  }\r\n\r\n  return (\r\n    <CSSTransition classNames=\"bubble\" timeout={1000}>\r\n      <div\r\n        className=\"flex justify-end mb-2 items-end\"\r\n        onMouseDown={handleMouseDown}\r\n        onMouseMove={handleMouseMove}\r\n        onMouseUp={handleMouseUp}\r\n        style={{ marginLeft: '50px' }}\r\n      >\r\n        <span\r\n          className=\"px-4 py-2 rounded-lg mr-2 whitespace-pre-wrap max-w-full typebot-guest-bubble cursor-pointer\"\r\n          data-testid=\"guest-bubble\"\r\n        >\r\n          {content}\r\n        </span>\r\n        {showAvatar && <Avatar avatarSrc={avatarSrc} />}\r\n      </div>\r\n    </CSSTransition>\r\n  )\r\n}\r\n","import {\r\n  EmailInputBlock,\r\n  InputBlockType,\r\n  NumberInputBlock,\r\n  PhoneNumberInputBlock,\r\n  TextInputBlock,\r\n  UrlInputBlock,\r\n} from 'models'\r\nimport React, { useRef, useState } from 'react'\r\nimport { InputSubmitContent } from '../../InputChatBlock'\r\nimport { SendButton } from '../SendButton'\r\nimport { TextInput } from './TextInput'\r\n\r\ntype TextFormProps = {\r\n  block:\r\n    | TextInputBlock\r\n    | EmailInputBlock\r\n    | NumberInputBlock\r\n    | UrlInputBlock\r\n    | PhoneNumberInputBlock\r\n  onSubmit: (value: InputSubmitContent) => void\r\n  defaultValue?: string\r\n  hasGuestAvatar: boolean\r\n}\r\n\r\nexport const TextForm = ({\r\n  block,\r\n  onSubmit,\r\n  defaultValue,\r\n  hasGuestAvatar,\r\n}: TextFormProps) => {\r\n  const [inputValue, setInputValue] = useState(defaultValue ?? '')\r\n  const inputRef = useRef<HTMLInputElement | null>(null)\r\n\r\n  const isLongText = block.type === InputBlockType.TEXT && block.options?.isLong\r\n\r\n  const handleChange = (inputValue: string) => {\r\n    if (block.type === InputBlockType.URL && !inputValue.startsWith('https://'))\r\n      return inputValue === 'https:/'\r\n        ? undefined\r\n        : setInputValue(`https://${inputValue}`)\r\n\r\n    setInputValue(inputValue)\r\n  }\r\n\r\n  const checkIfInputIsValid = () =>\r\n    inputValue !== '' && inputRef.current?.reportValidity()\r\n\r\n  const submit = () => {\r\n    if (checkIfInputIsValid()) onSubmit({ value: inputValue })\r\n  }\r\n\r\n  const submitWhenEnter = (e: React.KeyboardEvent) => {\r\n    if (block.type === InputBlockType.TEXT && block.options.isLong) return\r\n    if (e.key === 'Enter') submit()\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className={\r\n        'flex items-end justify-between rounded-lg pr-2 typebot-input w-full'\r\n      }\r\n      data-testid=\"input\"\r\n      style={{\r\n        marginRight: hasGuestAvatar ? '50px' : '0.5rem',\r\n        maxWidth: isLongText ? undefined : '350px',\r\n      }}\r\n      onKeyDown={submitWhenEnter}\r\n    >\r\n      <TextInput\r\n        inputRef={inputRef}\r\n        block={block}\r\n        onChange={handleChange}\r\n        value={inputValue}\r\n      />\r\n      <SendButton\r\n        type=\"button\"\r\n        label={block.options?.labels?.button ?? 'Send'}\r\n        isDisabled={inputValue === ''}\r\n        className=\"my-2 ml-2\"\r\n        onClick={submit}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n","import React, { SVGProps } from 'react'\r\nimport { SendIcon } from '../../../../assets/icons'\r\n\r\ntype SendButtonProps = {\r\n  label: string\r\n  isDisabled?: boolean\r\n  isLoading?: boolean\r\n  disableIcon?: boolean\r\n} & React.ButtonHTMLAttributes<HTMLButtonElement>\r\n\r\nexport const SendButton = ({\r\n  label,\r\n  isDisabled,\r\n  isLoading,\r\n  disableIcon,\r\n  ...props\r\n}: SendButtonProps) => {\r\n  return (\r\n    <button\r\n      type=\"submit\"\r\n      disabled={isDisabled || isLoading}\r\n      {...props}\r\n      className={\r\n        'py-2 px-4 justify-center font-semibold rounded-md text-white focus:outline-none flex items-center disabled:opacity-50 disabled:cursor-not-allowed disabled:brightness-100 transition-all filter hover:brightness-90 active:brightness-75 typebot-button ' +\r\n        props.className\r\n      }\r\n    >\r\n      {isLoading && <Spinner className=\"text-white\" />}\r\n      <span className={'xs:flex ' + (disableIcon ? '' : 'hidden')}>\r\n        {label}\r\n      </span>\r\n      <SendIcon\r\n        className={'send-icon flex ' + (disableIcon ? 'hidden' : 'xs:hidden')}\r\n      />\r\n    </button>\r\n  )\r\n}\r\n\r\nexport const Spinner = (props: SVGProps<SVGSVGElement>) => (\r\n  <svg\r\n    {...props}\r\n    className={'animate-spin -ml-1 mr-3 h-5 w-5 ' + props.className}\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    fill=\"none\"\r\n    viewBox=\"0 0 24 24\"\r\n    data-testid=\"loading-spinner\"\r\n  >\r\n    <circle\r\n      className=\"opacity-25\"\r\n      cx=\"12\"\r\n      cy=\"12\"\r\n      r=\"10\"\r\n      stroke=\"currentColor\"\r\n      strokeWidth=\"4\"\r\n    ></circle>\r\n    <path\r\n      className=\"opacity-75\"\r\n      fill=\"currentColor\"\r\n      d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\r\n    ></path>\r\n  </svg>\r\n)\r\n","import React from 'react'\r\n\r\nexport const SendIcon = (props: React.SVGProps<SVGSVGElement>) => (\r\n  <svg\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    viewBox=\"0 0 512 512\"\r\n    width=\"19px\"\r\n    color=\"white\"\r\n    {...props}\r\n  >\r\n    <path d=\"M476.59 227.05l-.16-.07L49.35 49.84A23.56 23.56 0 0027.14 52 24.65 24.65 0 0016 72.59v113.29a24 24 0 0019.52 23.57l232.93 43.07a4 4 0 010 7.86L35.53 303.45A24 24 0 0016 327v113.31A23.57 23.57 0 0026.59 460a23.94 23.94 0 0013.22 4 24.55 24.55 0 009.52-1.93L476.4 285.94l.19-.09a32 32 0 000-58.8z\" />\r\n  </svg>\r\n)\r\n","import {\r\n  TextInputBlock,\r\n  EmailInputBlock,\r\n  NumberInputBlock,\r\n  InputBlockType,\r\n  UrlInputBlock,\r\n  PhoneNumberInputBlock,\r\n} from 'models'\r\nimport React, { ChangeEvent, ChangeEventHandler } from 'react'\r\nimport PhoneInput, { Value, Country } from 'react-phone-number-input'\r\nimport { isMobile } from 'services/utils'\r\n\r\ntype TextInputProps = {\r\n  inputRef: React.RefObject<any>\r\n  block:\r\n    | TextInputBlock\r\n    | EmailInputBlock\r\n    | NumberInputBlock\r\n    | UrlInputBlock\r\n    | PhoneNumberInputBlock\r\n  value: string\r\n  onChange: (value: string) => void\r\n}\r\n\r\nexport const TextInput = ({\r\n  inputRef,\r\n  block,\r\n  value,\r\n  onChange,\r\n}: TextInputProps) => {\r\n  const handleInputChange = (\r\n    e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\r\n  ) => onChange(e.target.value)\r\n\r\n  const handlePhoneNumberChange = (value?: Value | undefined) => {\r\n    onChange(value as string)\r\n  }\r\n\r\n  switch (block.type) {\r\n    case InputBlockType.TEXT: {\r\n      return block.options?.isLong ? (\r\n        <LongTextInput\r\n          ref={inputRef}\r\n          value={value}\r\n          placeholder={\r\n            block.options?.labels?.placeholder ?? 'Type your answer...'\r\n          }\r\n          onChange={handleInputChange}\r\n        />\r\n      ) : (\r\n        <ShortTextInput\r\n          ref={inputRef}\r\n          value={value}\r\n          placeholder={\r\n            block.options?.labels?.placeholder ?? 'Type your answer...'\r\n          }\r\n          onChange={handleInputChange}\r\n          // Hack to disable Chrome autocomplete\r\n          name=\"no-name\"\r\n        />\r\n      )\r\n    }\r\n    case InputBlockType.EMAIL: {\r\n      return (\r\n        <ShortTextInput\r\n          ref={inputRef}\r\n          value={value}\r\n          placeholder={\r\n            block.options?.labels?.placeholder ?? 'Type your email...'\r\n          }\r\n          onChange={handleInputChange}\r\n          type=\"email\"\r\n          autoComplete=\"email\"\r\n        />\r\n      )\r\n    }\r\n    case InputBlockType.NUMBER: {\r\n      return (\r\n        <ShortTextInput\r\n          ref={inputRef}\r\n          value={value}\r\n          placeholder={\r\n            block.options?.labels?.placeholder ?? 'Type your answer...'\r\n          }\r\n          onChange={handleInputChange}\r\n          type=\"number\"\r\n          style={{ appearance: 'auto' }}\r\n          min={block.options?.min}\r\n          max={block.options?.max}\r\n          step={block.options?.step ?? 'any'}\r\n        />\r\n      )\r\n    }\r\n    case InputBlockType.URL: {\r\n      return (\r\n        <ShortTextInput\r\n          ref={inputRef}\r\n          value={value}\r\n          placeholder={block.options?.labels?.placeholder ?? 'Type your URL...'}\r\n          onChange={handleInputChange}\r\n          type=\"url\"\r\n          autoComplete=\"url\"\r\n        />\r\n      )\r\n    }\r\n    case InputBlockType.PHONE: {\r\n      return (\r\n        <PhoneInput\r\n          ref={inputRef}\r\n          value={value}\r\n          onChange={handlePhoneNumberChange}\r\n          placeholder={\r\n            block.options.labels.placeholder ?? 'Your phone number...'\r\n          }\r\n          defaultCountry={block.options.defaultCountryCode as Country}\r\n          autoFocus={!isMobile}\r\n        />\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\nconst ShortTextInput = React.forwardRef(\r\n  (\r\n    props: React.InputHTMLAttributes<HTMLInputElement>,\r\n    ref: React.ForwardedRef<HTMLInputElement>\r\n  ) => (\r\n    <input\r\n      ref={ref}\r\n      className=\"focus:outline-none bg-transparent px-4 py-4 flex-1 w-full text-input\"\r\n      type=\"text\"\r\n      style={{ fontSize: '16px' }}\r\n      autoFocus={!isMobile}\r\n      {...props}\r\n    />\r\n  )\r\n)\r\n\r\nconst LongTextInput = React.forwardRef(\r\n  (\r\n    props: {\r\n      placeholder: string\r\n      value: string\r\n      onChange: ChangeEventHandler\r\n    },\r\n    ref: React.ForwardedRef<HTMLTextAreaElement>\r\n  ) => (\r\n    <textarea\r\n      ref={ref}\r\n      className=\"focus:outline-none bg-transparent px-4 py-4 flex-1 w-full text-input\"\r\n      rows={6}\r\n      data-testid=\"textarea\"\r\n      required\r\n      style={{ fontSize: '16px' }}\r\n      autoFocus={!isMobile}\r\n      {...props}\r\n    />\r\n  )\r\n)\r\n","import { DateInputOptions } from 'models'\r\nimport React, { useState } from 'react'\r\nimport { parseReadableDate } from 'services/inputs'\r\nimport { InputSubmitContent } from '../InputChatBlock'\r\nimport { SendButton } from './SendButton'\r\n\r\ntype DateInputProps = {\r\n  onSubmit: (inputValue: InputSubmitContent) => void\r\n  options?: DateInputOptions\r\n}\r\n\r\nexport const DateForm = ({\r\n  onSubmit,\r\n  options,\r\n}: DateInputProps): JSX.Element => {\r\n  const { hasTime, isRange, labels } = options ?? {}\r\n  const [inputValues, setInputValues] = useState({ from: '', to: '' })\r\n  return (\r\n    <div className=\"flex flex-col w-full lg:w-4/6\">\r\n      <div className=\"flex items-center\">\r\n        <form\r\n          className={\r\n            'flex justify-between rounded-lg typebot-input pr-2 items-end'\r\n          }\r\n          onSubmit={(e) => {\r\n            if (inputValues.from === '' && inputValues.to === '') return\r\n            e.preventDefault()\r\n            onSubmit({\r\n              value: `${inputValues.from}${\r\n                isRange ? ` to ${inputValues.to}` : ''\r\n              }`,\r\n              label: parseReadableDate({ ...inputValues, hasTime, isRange }),\r\n            })\r\n          }}\r\n        >\r\n          <div className=\"flex flex-col\">\r\n            <div className={'flex items-center p-4 ' + (isRange ? 'pb-0' : '')}>\r\n              {isRange && (\r\n                <p className=\"font-semibold mr-2\">{labels?.from ?? 'From:'}</p>\r\n              )}\r\n              <input\r\n                className=\"focus:outline-none flex-1 w-full text-input\"\r\n                style={{\r\n                  minHeight: '2rem',\r\n                  minWidth: '100px',\r\n                  fontSize: '16px',\r\n                }}\r\n                type={hasTime ? 'datetime-local' : 'date'}\r\n                onChange={(e) =>\r\n                  setInputValues({ ...inputValues, from: e.target.value })\r\n                }\r\n                data-testid=\"from-date\"\r\n              />\r\n            </div>\r\n            {isRange && (\r\n              <div className=\"flex items-center p-4\">\r\n                {isRange && (\r\n                  <p className=\"font-semibold\">{labels?.to ?? 'To:'}</p>\r\n                )}\r\n                <input\r\n                  className=\"focus:outline-none flex-1 w-full text-input ml-2\"\r\n                  style={{\r\n                    minHeight: '2rem',\r\n                    minWidth: '100px',\r\n                    fontSize: '16px',\r\n                  }}\r\n                  type={hasTime ? 'datetime-local' : 'date'}\r\n                  onChange={(e) =>\r\n                    setInputValues({ ...inputValues, to: e.target.value })\r\n                  }\r\n                  data-testid=\"to-date\"\r\n                />\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          <SendButton\r\n            label={labels?.button ?? 'Send'}\r\n            isDisabled={inputValues.to === '' && inputValues.from === ''}\r\n            className=\"my-2 ml-2\"\r\n          />\r\n        </form>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import { useAnswers } from 'contexts/AnswersContext'\r\nimport { useTypebot } from 'contexts/TypebotContext'\r\nimport { ChoiceInputBlock } from 'models'\r\nimport React, { useState } from 'react'\r\nimport { parseVariables } from 'services/variable'\r\nimport { InputSubmitContent } from '../InputChatBlock'\r\nimport { SendButton } from './SendButton'\r\n\r\ntype ChoiceFormProps = {\r\n  block: ChoiceInputBlock\r\n  onSubmit: (value: InputSubmitContent) => void\r\n}\r\n\r\nexport const ChoiceForm = ({ block, onSubmit }: ChoiceFormProps) => {\r\n  const {\r\n    typebot: { variables },\r\n  } = useTypebot()\r\n  const { resultValues } = useAnswers()\r\n  const [selectedIndices, setSelectedIndices] = useState<number[]>([])\r\n\r\n  const handleClick = (itemIndex: number) => (e: React.MouseEvent) => {\r\n    e.preventDefault()\r\n    if (block.options?.isMultipleChoice) toggleSelectedItemIndex(itemIndex)\r\n    else\r\n      onSubmit({\r\n        value: parseVariables(variables)(block.items[itemIndex].content),\r\n        itemId: block.items[itemIndex].id,\r\n      })\r\n  }\r\n\r\n  const toggleSelectedItemIndex = (itemIndex: number) => {\r\n    const existingIndex = selectedIndices.indexOf(itemIndex)\r\n    if (existingIndex !== -1) {\r\n      selectedIndices.splice(existingIndex, 1)\r\n      setSelectedIndices([...selectedIndices])\r\n    } else {\r\n      setSelectedIndices([...selectedIndices, itemIndex])\r\n    }\r\n  }\r\n\r\n  const handleSubmit = () =>\r\n    onSubmit({\r\n      value: selectedIndices\r\n        .map((itemIndex) =>\r\n          parseVariables(variables)(block.items[itemIndex].content)\r\n        )\r\n        .join(', '),\r\n    })\r\n\r\n  const isUniqueFirstButton =\r\n    resultValues &&\r\n    resultValues.answers.length === 0 &&\r\n    block.items.length === 1\r\n\r\n  return (\r\n    <form className=\"flex flex-col items-end\" onSubmit={handleSubmit}>\r\n      <div className=\"flex flex-wrap justify-end\">\r\n        {block.items.map((item, idx) => (\r\n          <span key={item.id} className=\"relative inline-flex ml-2 mb-2\">\r\n            <button\r\n              role={block.options?.isMultipleChoice ? 'checkbox' : 'button'}\r\n              onClick={handleClick(idx)}\r\n              className={\r\n                'py-2 px-4 text-left font-semibold rounded-md transition-all filter hover:brightness-90 active:brightness-75 duration-100 focus:outline-none typebot-button ' +\r\n                (selectedIndices.includes(idx) ||\r\n                !block.options?.isMultipleChoice\r\n                  ? ''\r\n                  : 'selectable')\r\n              }\r\n              data-testid=\"button\"\r\n              data-itemid={item.id}\r\n            >\r\n              {parseVariables(variables)(item.content)}\r\n            </button>\r\n            {isUniqueFirstButton && (\r\n              <span className=\"flex h-3 w-3 absolute top-0 right-0 -mt-1 -mr-1 ping\">\r\n                <span className=\"animate-ping absolute inline-flex h-full w-full rounded-full brightness-225 opacity-75\" />\r\n                <span className=\"relative inline-flex rounded-full h-3 w-3 brightness-200\" />\r\n              </span>\r\n            )}\r\n          </span>\r\n        ))}\r\n      </div>\r\n      <div className=\"flex\">\r\n        {selectedIndices.length > 0 && (\r\n          <SendButton\r\n            label={block.options?.buttonLabel ?? 'Send'}\r\n            disableIcon\r\n          />\r\n        )}\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n","import { PaymentInputOptions, PaymentProvider } from 'models'\r\nimport React from 'react'\r\nimport { StripePaymentForm } from './StripePaymentForm'\r\n\r\ntype Props = {\r\n  onSuccess: () => void\r\n  options: PaymentInputOptions\r\n}\r\n\r\nexport const PaymentForm = ({ onSuccess, options }: Props): JSX.Element => {\r\n  switch (options.provider) {\r\n    case PaymentProvider.STRIPE:\r\n      return <StripePaymentForm onSuccess={onSuccess} options={options} />\r\n  }\r\n}\r\n","import React, { FormEvent, useEffect, useState } from 'react'\r\nimport { useStripe, useElements, PaymentElement } from '@stripe/react-stripe-js'\r\nimport { Elements } from '@stripe/react-stripe-js'\r\nimport { createPaymentIntent } from 'services/stripe'\r\nimport { useTypebot } from 'contexts/TypebotContext'\r\nimport { PaymentInputOptions, Variable } from 'models'\r\nimport { SendButton, Spinner } from '../SendButton'\r\nimport { useFrame } from 'react-frame-component'\r\nimport { initStripe } from '../../../../../../lib/stripe'\r\nimport { parseVariables } from 'services/variable'\r\nimport { useChat } from 'contexts/ChatContext'\r\n\r\ntype Props = {\r\n  options: PaymentInputOptions\r\n  onSuccess: () => void\r\n}\r\n\r\nexport const StripePaymentForm = ({ options, onSuccess }: Props) => {\r\n  const {\r\n    apiHost,\r\n    isPreview,\r\n    typebot: { variables },\r\n    onNewLog,\r\n  } = useTypebot()\r\n  const { window: frameWindow, document: frameDocument } = useFrame()\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  const [stripe, setStripe] = useState<any>(null)\r\n  const [clientSecret, setClientSecret] = useState('')\r\n  const [amountLabel, setAmountLabel] = useState('')\r\n\r\n  useEffect(() => {\r\n    ;(async () => {\r\n      const { data, error } = await createPaymentIntent({\r\n        apiHost,\r\n        isPreview,\r\n        variables,\r\n        inputOptions: options,\r\n      })\r\n      if (error)\r\n        return onNewLog({\r\n          status: 'error',\r\n          description: error.name + ' ' + error.message,\r\n          details: error.message,\r\n        })\r\n      if (!data || !frameDocument) return\r\n      await initStripe(frameDocument)\r\n      if (!frameWindow?.Stripe) return\r\n      setStripe(frameWindow.Stripe(data.publicKey))\r\n      setClientSecret(data.clientSecret)\r\n      setAmountLabel(data.amountLabel)\r\n    })()\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [])\r\n\r\n  if (!stripe || !clientSecret) return <Spinner className=\"text-blue-500\" />\r\n  return (\r\n    <Elements stripe={stripe} options={{ clientSecret }}>\r\n      <CheckoutForm\r\n        onSuccess={onSuccess}\r\n        clientSecret={clientSecret}\r\n        amountLabel={amountLabel}\r\n        options={options}\r\n        variables={variables}\r\n        viewerHost={apiHost}\r\n      />\r\n    </Elements>\r\n  )\r\n}\r\n\r\nconst CheckoutForm = ({\r\n  onSuccess,\r\n  clientSecret,\r\n  amountLabel,\r\n  options,\r\n  variables,\r\n  viewerHost,\r\n}: {\r\n  onSuccess: () => void\r\n  clientSecret: string\r\n  amountLabel: string\r\n  options: PaymentInputOptions\r\n  variables: Variable[]\r\n  viewerHost: string\r\n}) => {\r\n  const { scroll } = useChat()\r\n  const [ignoreFirstPaymentIntentCall, setIgnoreFirstPaymentIntentCall] =\r\n    useState(true)\r\n\r\n  const stripe = useStripe()\r\n  const elements = useElements()\r\n\r\n  const [message, setMessage] = useState<string>()\r\n  const [isLoading, setIsLoading] = useState(false)\r\n\r\n  const [isPayButtonVisible, setIsPayButtonVisible] = useState(false)\r\n\r\n  useEffect(() => {\r\n    if (!stripe || !clientSecret) return\r\n\r\n    if (ignoreFirstPaymentIntentCall)\r\n      return setIgnoreFirstPaymentIntentCall(false)\r\n\r\n    stripe.retrievePaymentIntent(clientSecret).then(({ paymentIntent }) => {\r\n      switch (paymentIntent?.status) {\r\n        case 'succeeded':\r\n          setMessage('Payment succeeded!')\r\n          break\r\n        case 'processing':\r\n          setMessage('Your payment is processing.')\r\n          break\r\n        case 'requires_payment_method':\r\n          setMessage('Your payment was not successful, please try again.')\r\n          break\r\n        default:\r\n          setMessage('Something went wrong.')\r\n          break\r\n      }\r\n    })\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [stripe, clientSecret])\r\n\r\n  const handleSubmit = async (e: FormEvent) => {\r\n    e.preventDefault()\r\n\r\n    if (!stripe || !elements) return\r\n\r\n    setIsLoading(true)\r\n\r\n    const { error, paymentIntent } = await stripe.confirmPayment({\r\n      elements,\r\n      confirmParams: {\r\n        // TO-DO: Handle redirection correctly.\r\n        return_url: viewerHost,\r\n        payment_method_data: {\r\n          billing_details: {\r\n            name: options.additionalInformation?.name\r\n              ? parseVariables(variables)(options.additionalInformation?.name)\r\n              : undefined,\r\n            email: options.additionalInformation?.email\r\n              ? parseVariables(variables)(options.additionalInformation?.email)\r\n              : undefined,\r\n            phone: options.additionalInformation?.phoneNumber\r\n              ? parseVariables(variables)(\r\n                  options.additionalInformation?.phoneNumber\r\n                )\r\n              : undefined,\r\n          },\r\n        },\r\n      },\r\n      redirect: 'if_required',\r\n    })\r\n\r\n    setIsLoading(false)\r\n    if (error?.type === 'validation_error') return\r\n    if (error?.type === 'card_error') return setMessage(error.message)\r\n    if (!error && paymentIntent.status === 'succeeded') return onSuccess()\r\n  }\r\n\r\n  const showPayButton = () => {\r\n    setIsPayButtonVisible(true)\r\n    scroll()\r\n  }\r\n\r\n  return (\r\n    <form\r\n      id=\"payment-form\"\r\n      onSubmit={handleSubmit}\r\n      className=\"flex flex-col rounded-lg p-4 typebot-input w-full items-center\"\r\n    >\r\n      <PaymentElement\r\n        id=\"payment-element\"\r\n        className=\"w-full\"\r\n        onReady={showPayButton}\r\n      />\r\n      {isPayButtonVisible && (\r\n        <SendButton\r\n          label={`${options.labels.button} ${amountLabel}`}\r\n          isDisabled={isLoading || !stripe || !elements}\r\n          isLoading={isLoading}\r\n          className=\"mt-4 w-full max-w-lg\"\r\n          disableIcon\r\n        />\r\n      )}\r\n\r\n      {message && (\r\n        <div\r\n          id=\"payment-message\"\r\n          className=\"typebot-input-error-message mt-4 text-center\"\r\n        >\r\n          {message}\r\n        </div>\r\n      )}\r\n    </form>\r\n  )\r\n}\r\n","import { PaymentInputOptions, Variable } from 'models'\r\nimport { sendRequest } from 'utils'\r\n\r\nexport const createPaymentIntent = ({\r\n  apiHost,\r\n  isPreview,\r\n  inputOptions,\r\n  variables,\r\n}: {\r\n  inputOptions: PaymentInputOptions\r\n  apiHost: string\r\n  variables: Variable[]\r\n  isPreview: boolean\r\n}) =>\r\n  sendRequest<{ clientSecret: string; publicKey: string; amountLabel: string }>(\r\n    {\r\n      url: `${apiHost}/api/integrations/stripe/createPaymentIntent`,\r\n      method: 'POST',\r\n      body: { inputOptions, isPreview, variables },\r\n    }\r\n  )\r\n","export const initStripe = (document: Document): Promise<void> =>\r\n  new Promise((resolve) => {\r\n    const existingScript = document.getElementById('stripe-script')\r\n    if (existingScript) return resolve()\r\n    const script = document.createElement('script')\r\n    script.src = 'https://js.stripe.com/v3'\r\n    script.id = 'stripe-script'\r\n    document.body.appendChild(script)\r\n    script.onload = () => {\r\n      resolve()\r\n    }\r\n  })\r\n","import { RatingInputOptions, RatingInputBlock } from 'models'\r\nimport React, { FormEvent, useState } from 'react'\r\nimport { isDefined, isEmpty, isNotDefined } from 'utils'\r\nimport { InputSubmitContent } from '../InputChatBlock'\r\nimport { SendButton } from './SendButton'\r\n\r\ntype Props = {\r\n  block: RatingInputBlock\r\n  onSubmit: (value: InputSubmitContent) => void\r\n}\r\n\r\nexport const RatingForm = ({ block, onSubmit }: Props) => {\r\n  const [rating, setRating] = useState<number>()\r\n\r\n  const handleSubmit = (e: FormEvent) => {\r\n    e.preventDefault()\r\n    if (isNotDefined(rating)) return\r\n    onSubmit({ value: rating.toString() })\r\n  }\r\n\r\n  const handleClick = (rating: number) => setRating(rating)\r\n\r\n  return (\r\n    <form className=\"flex flex-col\" onSubmit={handleSubmit}>\r\n      {block.options.labels.left && (\r\n        <span className=\"text-sm w-full mb-2 rating-label\">\r\n          {block.options.labels.left}\r\n        </span>\r\n      )}\r\n      <div className=\"flex flex-wrap justify-center\">\r\n        {Array.from(\r\n          Array(\r\n            block.options.length +\r\n              (block.options.buttonType === 'Numbers' ? 1 : 0)\r\n          )\r\n        ).map((_, idx) => (\r\n          <RatingButton\r\n            {...block.options}\r\n            key={idx}\r\n            rating={rating}\r\n            idx={idx + (block.options.buttonType === 'Numbers' ? 0 : 1)}\r\n            onClick={handleClick}\r\n          />\r\n        ))}\r\n      </div>\r\n      {block.options.labels.right && (\r\n        <span className=\"text-sm w-full text-right mb-2 pr-2 rating-label\">\r\n          {block.options.labels.right}\r\n        </span>\r\n      )}\r\n\r\n      <div className=\"flex justify-end mr-2\">\r\n        {isDefined(rating) && (\r\n          <SendButton\r\n            label={block.options?.labels.button ?? 'Send'}\r\n            disableIcon\r\n          />\r\n        )}\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\nconst RatingButton = ({\r\n  rating,\r\n  idx,\r\n  buttonType,\r\n  customIcon,\r\n  onClick,\r\n}: Pick<RatingInputOptions, 'buttonType' | 'customIcon'> & {\r\n  rating: number | undefined\r\n  idx: number\r\n  onClick: (idx: number) => void\r\n}) => {\r\n  if (buttonType === 'Numbers')\r\n    return (\r\n      <button\r\n        onClick={(e) => {\r\n          e.preventDefault()\r\n          onClick(idx)\r\n        }}\r\n        className={\r\n          'py-2 px-4 mr-2 mb-2 text-left font-semibold rounded-md transition-all filter hover:brightness-90 active:brightness-75 duration-100 focus:outline-none typebot-button ' +\r\n          (isDefined(rating) && idx <= rating ? '' : 'selectable')\r\n        }\r\n      >\r\n        {idx}\r\n      </button>\r\n    )\r\n  return (\r\n    <div\r\n      className={\r\n        'flex justify-center items-center rating-icon-container cursor-pointer mr-2 mb-2 ' +\r\n        (isDefined(rating) && idx <= rating ? 'selected' : '')\r\n      }\r\n      onClick={() => onClick(idx)}\r\n      dangerouslySetInnerHTML={{\r\n        __html:\r\n          customIcon.isEnabled && !isEmpty(customIcon.svg)\r\n            ? customIcon.svg\r\n            : defaultIcon,\r\n      }}\r\n    />\r\n  )\r\n}\r\n\r\nconst defaultIcon = `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"feather feather-star\"><polygon points=\"12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2\"></polygon></svg>`\r\n","import { useAnswers } from 'contexts/AnswersContext'\r\nimport { useTypebot } from 'contexts/TypebotContext'\r\nimport { FileInputBlock } from 'models'\r\nimport React, { ChangeEvent, FormEvent, useState, DragEvent } from 'react'\r\nimport { uploadFiles } from 'utils'\r\nimport { InputSubmitContent } from '../InputChatBlock'\r\nimport { SendButton, Spinner } from './SendButton'\r\n\r\ntype Props = {\r\n  block: FileInputBlock\r\n  onSubmit: (url: InputSubmitContent) => void\r\n  onSkip: () => void\r\n}\r\n\r\nexport const FileUploadForm = ({\r\n  block: {\r\n    id,\r\n    options: { isMultipleAllowed, labels, sizeLimit, isRequired },\r\n  },\r\n  onSubmit,\r\n  onSkip,\r\n}: Props) => {\r\n  const { isPreview, currentTypebotId } = useTypebot()\r\n  const { resultId } = useAnswers()\r\n  const [selectedFiles, setSelectedFiles] = useState<File[]>([])\r\n  const [isUploading, setIsUploading] = useState(false)\r\n  const [uploadProgressPercent, setUploadProgressPercent] = useState(0)\r\n  const [isDraggingOver, setIsDraggingOver] = useState(false)\r\n  const [errorMessage, setErrorMessage] = useState<string>()\r\n\r\n  const handleFileChange = async (e: ChangeEvent<HTMLInputElement>) => {\r\n    if (!e.target.files) return\r\n    onNewFiles(e.target.files)\r\n  }\r\n\r\n  const onNewFiles = (files: FileList) => {\r\n    setErrorMessage(undefined)\r\n    const newFiles = Array.from(files)\r\n    if (newFiles.some((file) => file.size > (sizeLimit ?? 10) * 1024 * 1024))\r\n      return setErrorMessage(`A file is larger than ${sizeLimit ?? 10}MB`)\r\n    if (!isMultipleAllowed && files) return startSingleFileUpload(newFiles[0])\r\n    setSelectedFiles([...selectedFiles, ...newFiles])\r\n  }\r\n\r\n  const handleSubmit = async (e: FormEvent) => {\r\n    e.preventDefault()\r\n    if (selectedFiles.length === 0) return\r\n    startFilesUpload(selectedFiles)\r\n  }\r\n\r\n  const startSingleFileUpload = async (file: File) => {\r\n    if (isPreview)\r\n      return onSubmit({\r\n        label: `File uploaded`,\r\n        value: 'http://fake-upload-url.com',\r\n      })\r\n    setIsUploading(true)\r\n    const urls = await uploadFiles({\r\n      basePath: `/api/typebots/${currentTypebotId}/blocks/${id}`,\r\n      files: [\r\n        {\r\n          file,\r\n          path: `public/results/${resultId}/${id}/${file.name}`,\r\n        },\r\n      ],\r\n    })\r\n    setIsUploading(false)\r\n    if (urls.length)\r\n      return onSubmit({ label: `File uploaded`, value: urls[0] ?? '' })\r\n    setErrorMessage('An error occured while uploading the file')\r\n  }\r\n  const startFilesUpload = async (files: File[]) => {\r\n    if (isPreview)\r\n      return onSubmit({\r\n        label: `${files.length} file${files.length > 1 ? 's' : ''} uploaded`,\r\n        value: files\r\n          .map((_, idx) => `http://fake-upload-url.com/${idx}`)\r\n          .join(', '),\r\n      })\r\n    setIsUploading(true)\r\n    const urls = await uploadFiles({\r\n      basePath: `/api/typebots/${currentTypebotId}/blocks/${id}`,\r\n      files: files.map((file) => ({\r\n        file: file,\r\n        path: `public/results/${resultId}/${id}/${file.name}`,\r\n      })),\r\n      onUploadProgress: setUploadProgressPercent,\r\n    })\r\n    setIsUploading(false)\r\n    setUploadProgressPercent(0)\r\n    if (urls.length !== files.length)\r\n      return setErrorMessage('An error occured while uploading the files')\r\n    onSubmit({\r\n      label: `${urls.length} file${urls.length > 1 ? 's' : ''} uploaded`,\r\n      value: urls.join(', '),\r\n    })\r\n  }\r\n\r\n  const handleDragOver = (e: DragEvent) => {\r\n    e.preventDefault()\r\n    setIsDraggingOver(true)\r\n  }\r\n\r\n  const handleDragLeave = () => setIsDraggingOver(false)\r\n\r\n  const handleDropFile = (e: DragEvent<HTMLLabelElement>) => {\r\n    e.preventDefault()\r\n    e.stopPropagation()\r\n    if (!e.dataTransfer.files) return\r\n    onNewFiles(e.dataTransfer.files)\r\n  }\r\n\r\n  const clearFiles = () => setSelectedFiles([])\r\n\r\n  return (\r\n    <form className=\"flex flex-col w-full\" onSubmit={handleSubmit}>\r\n      <label\r\n        htmlFor=\"dropzone-file\"\r\n        className={\r\n          'typebot-upload-input py-6 flex flex-col justify-center items-center w-full bg-gray-50 rounded-lg border-2 border-gray-300 border-dashed cursor-pointer hover:bg-gray-100 px-8 mb-2 ' +\r\n          (isDraggingOver ? 'dragging-over' : '')\r\n        }\r\n        onDragOver={handleDragOver}\r\n        onDragLeave={handleDragLeave}\r\n        onDrop={handleDropFile}\r\n      >\r\n        {isUploading ? (\r\n          <>\r\n            {selectedFiles.length === 1 ? (\r\n              <Spinner />\r\n            ) : (\r\n              <div className=\"w-full bg-gray-200 rounded-full h-2.5\">\r\n                <div\r\n                  className=\"upload-progress-bar h-2.5 rounded-full\"\r\n                  style={{\r\n                    width: `${\r\n                      uploadProgressPercent > 0 ? uploadProgressPercent : 10\r\n                    }%`,\r\n                    transition: 'width 150ms cubic-bezier(0.4, 0, 0.2, 1)',\r\n                  }}\r\n                />\r\n              </div>\r\n            )}\r\n          </>\r\n        ) : (\r\n          <>\r\n            <div className=\"flex flex-col justify-center items-center\">\r\n              {selectedFiles.length ? (\r\n                <span className=\"relative\">\r\n                  <FileIcon />\r\n                  <div\r\n                    className=\"total-files-indicator flex items-center justify-center absolute -right-1 rounded-full px-1 h-4\"\r\n                    style={{ bottom: '5px' }}\r\n                  >\r\n                    {selectedFiles.length}\r\n                  </div>\r\n                </span>\r\n              ) : (\r\n                <UploadIcon />\r\n              )}\r\n              <p\r\n                className=\"text-sm text-gray-500 text-center\"\r\n                dangerouslySetInnerHTML={{ __html: labels.placeholder }}\r\n              />\r\n            </div>\r\n            <input\r\n              id=\"dropzone-file\"\r\n              type=\"file\"\r\n              className=\"hidden\"\r\n              multiple={isMultipleAllowed}\r\n              onChange={handleFileChange}\r\n            />\r\n          </>\r\n        )}\r\n      </label>\r\n      {selectedFiles.length === 0 && isRequired === false && (\r\n        <div className=\"flex justify-end\">\r\n          <button\r\n            className={\r\n              'py-2 px-4 justify-center font-semibold rounded-md text-white focus:outline-none flex items-center disabled:opacity-50 disabled:cursor-not-allowed disabled:brightness-100 transition-all filter hover:brightness-90 active:brightness-75 typebot-button '\r\n            }\r\n            onClick={onSkip}\r\n          >\r\n            Skip\r\n          </button>\r\n        </div>\r\n      )}\r\n      {isMultipleAllowed && selectedFiles.length > 0 && !isUploading && (\r\n        <div className=\"flex justify-end\">\r\n          <div className=\"flex\">\r\n            {selectedFiles.length && (\r\n              <button\r\n                className={\r\n                  'secondary-button py-2 px-4 justify-center font-semibold rounded-md text-white focus:outline-none flex items-center disabled:opacity-50 disabled:cursor-not-allowed disabled:brightness-100 transition-all filter hover:brightness-90 active:brightness-75 mr-2'\r\n                }\r\n                onClick={clearFiles}\r\n              >\r\n                Clear\r\n              </button>\r\n            )}\r\n            <SendButton\r\n              type=\"submit\"\r\n              label={\r\n                labels.button\r\n                  ? `${labels.button} ${selectedFiles.length} file${\r\n                      selectedFiles.length > 1 ? 's' : ''\r\n                    }`\r\n                  : 'Upload'\r\n              }\r\n              disableIcon\r\n            />\r\n          </div>\r\n        </div>\r\n      )}\r\n      {errorMessage && <p className=\"text-red-500 text-sm\">{errorMessage}</p>}\r\n    </form>\r\n  )\r\n}\r\n\r\nconst UploadIcon = () => (\r\n  <svg\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    width=\"24\"\r\n    height=\"24\"\r\n    viewBox=\"0 0 24 24\"\r\n    fill=\"none\"\r\n    stroke=\"currentColor\"\r\n    strokeWidth=\"2\"\r\n    strokeLinecap=\"round\"\r\n    strokeLinejoin=\"round\"\r\n    className=\"mb-3\"\r\n  >\r\n    <polyline points=\"16 16 12 12 8 16\"></polyline>\r\n    <line x1=\"12\" y1=\"12\" x2=\"12\" y2=\"21\"></line>\r\n    <path d=\"M20.39 18.39A5 5 0 0 0 18 9h-1.26A8 8 0 1 0 3 16.3\"></path>\r\n    <polyline points=\"16 16 12 12 8 16\"></polyline>\r\n  </svg>\r\n)\r\n\r\nconst FileIcon = () => (\r\n  <svg\r\n    className=\"mb-3\"\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    width=\"24\"\r\n    height=\"24\"\r\n    viewBox=\"0 0 24 24\"\r\n    fill=\"none\"\r\n    stroke=\"currentColor\"\r\n    strokeWidth=\"2\"\r\n    strokeLinecap=\"round\"\r\n    strokeLinejoin=\"round\"\r\n  >\r\n    <path d=\"M13 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V9z\"></path>\r\n    <polyline points=\"13 2 13 9 20 9\"></polyline>\r\n  </svg>\r\n)\r\n","import {\r\n  Background,\r\n  BackgroundType,\r\n  ChatTheme,\r\n  ContainerColors,\r\n  GeneralTheme,\r\n  InputColors,\r\n  Theme,\r\n} from 'models'\r\n\r\nconst cssVariableNames = {\r\n  general: {\r\n    bgImage: '--typebot-container-bg-image',\r\n    bgColor: '--typebot-container-bg-color',\r\n    fontFamily: '--typebot-container-font-family',\r\n  },\r\n  chat: {\r\n    hostBubbles: {\r\n      bgColor: '--typebot-host-bubble-bg-color',\r\n      color: '--typebot-host-bubble-color',\r\n    },\r\n    guestBubbles: {\r\n      bgColor: '--typebot-guest-bubble-bg-color',\r\n      color: '--typebot-guest-bubble-color',\r\n    },\r\n    inputs: {\r\n      bgColor: '--typebot-input-bg-color',\r\n      color: '--typebot-input-color',\r\n      placeholderColor: '--typebot-input-placeholder-color',\r\n    },\r\n    buttons: {\r\n      bgColor: '--typebot-button-bg-color',\r\n      color: '--typebot-button-color',\r\n    },\r\n  },\r\n}\r\n\r\nexport const setCssVariablesValue = (\r\n  theme: Theme | undefined,\r\n  documentStyle: CSSStyleDeclaration\r\n) => {\r\n  if (!theme) return\r\n  if (theme.general) setGeneralTheme(theme.general, documentStyle)\r\n  if (theme.chat) setChatTheme(theme.chat, documentStyle)\r\n}\r\n\r\nconst setGeneralTheme = (\r\n  generalTheme: GeneralTheme,\r\n  documentStyle: CSSStyleDeclaration\r\n) => {\r\n  const { background, font } = generalTheme\r\n  if (background) setTypebotBackground\r\n  if (font) documentStyle.setProperty(cssVariableNames.general.fontFamily, font)\r\n}\r\n\r\nconst setChatTheme = (\r\n  chatTheme: ChatTheme,\r\n  documentStyle: CSSStyleDeclaration\r\n) => {\r\n  const { hostBubbles, guestBubbles, buttons, inputs } = chatTheme\r\n  if (hostBubbles) setHostBubbles(hostBubbles, documentStyle)\r\n  if (guestBubbles) setGuestBubbles(guestBubbles, documentStyle)\r\n  if (buttons) setButtons(buttons, documentStyle)\r\n  if (inputs) setInputs(inputs, documentStyle)\r\n}\r\n\r\nconst setHostBubbles = (\r\n  hostBubbles: ContainerColors,\r\n  documentStyle: CSSStyleDeclaration\r\n) => {\r\n  if (hostBubbles.backgroundColor)\r\n    documentStyle.setProperty(\r\n      cssVariableNames.chat.hostBubbles.bgColor,\r\n      hostBubbles.backgroundColor\r\n    )\r\n  if (hostBubbles.color)\r\n    documentStyle.setProperty(\r\n      cssVariableNames.chat.hostBubbles.color,\r\n      hostBubbles.color\r\n    )\r\n}\r\n\r\nconst setGuestBubbles = (\r\n  guestBubbles: ContainerColors,\r\n  documentStyle: CSSStyleDeclaration\r\n) => {\r\n  if (guestBubbles.backgroundColor)\r\n    documentStyle.setProperty(\r\n      cssVariableNames.chat.guestBubbles.bgColor,\r\n      guestBubbles.backgroundColor\r\n    )\r\n  if (guestBubbles.color)\r\n    documentStyle.setProperty(\r\n      cssVariableNames.chat.guestBubbles.color,\r\n      guestBubbles.color\r\n    )\r\n}\r\n\r\nconst setButtons = (\r\n  buttons: ContainerColors,\r\n  documentStyle: CSSStyleDeclaration\r\n) => {\r\n  if (buttons.backgroundColor)\r\n    documentStyle.setProperty(\r\n      cssVariableNames.chat.buttons.bgColor,\r\n      buttons.backgroundColor\r\n    )\r\n  if (buttons.color)\r\n    documentStyle.setProperty(\r\n      cssVariableNames.chat.buttons.color,\r\n      buttons.color\r\n    )\r\n}\r\n\r\nconst setInputs = (inputs: InputColors, documentStyle: CSSStyleDeclaration) => {\r\n  if (inputs.backgroundColor)\r\n    documentStyle.setProperty(\r\n      cssVariableNames.chat.inputs.bgColor,\r\n      inputs.backgroundColor\r\n    )\r\n  if (inputs.color)\r\n    documentStyle.setProperty(cssVariableNames.chat.inputs.color, inputs.color)\r\n  if (inputs.placeholderColor)\r\n    documentStyle.setProperty(\r\n      cssVariableNames.chat.inputs.placeholderColor,\r\n      inputs.placeholderColor\r\n    )\r\n}\r\n\r\nconst setTypebotBackground = (\r\n  background: Background,\r\n  documentStyle: CSSStyleDeclaration\r\n) => {\r\n  documentStyle.setProperty(\r\n    background?.type === BackgroundType.IMAGE\r\n      ? cssVariableNames.general.bgImage\r\n      : cssVariableNames.general.bgColor,\r\n    background.type === BackgroundType.NONE\r\n      ? 'transparent'\r\n      : background.content ?? '#ffffff'\r\n  )\r\n}\r\n","import React, { useEffect, useRef } from 'react'\r\nimport { useFrame } from 'react-frame-component'\r\n\r\nexport const LiteBadge = () => {\r\n  const { document } = useFrame()\r\n  const liteBadge = useRef<HTMLAnchorElement | null>(null)\r\n\r\n  useEffect(() => {\r\n    if (!document) return\r\n    const container = document.querySelector(\r\n      '[data-testid=\"container\"]'\r\n    ) as HTMLDivElement\r\n    const observer = new MutationObserver(function (mutations_list) {\r\n      mutations_list.forEach(function (mutation) {\r\n        mutation.removedNodes.forEach(function (removed_node) {\r\n          if ((removed_node as HTMLElement).id == 'lite-badge')\r\n            container.append(liteBadge.current as Node)\r\n        })\r\n      })\r\n    })\r\n    observer.observe(container, {\r\n      subtree: false,\r\n      childList: true,\r\n    })\r\n\r\n    return () => {\r\n      observer.disconnect()\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [])\r\n\r\n  return (\r\n    <a\r\n      ref={liteBadge}\r\n      href={'https://www.typebot.io/?utm_source=litebadge'}\r\n      target=\"_blank\"\r\n      rel=\"noopener noreferrer\"\r\n      className=\"fixed py-1 px-2 bg-white z-50 rounded shadow-md lite-badge\"\r\n      style={{ bottom: '20px' }}\r\n      id=\"lite-badge\"\r\n    >\r\n      Made with <span className=\"text-blue-500\">Typebot</span>.\r\n    </a>\r\n  )\r\n}\r\n"],"mappings":"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","names":["gtag_exports","__export","gtag_default","sendGaEvent","initGoogleAnalytics","init_gtag","__esmMin","id","resolve","existingScript","script","initScript","options","src_exports","__export","TypebotViewer","parseVariables","__toCommonJS","import_react","import_react","import_utils","parseVariables","variables","options","text","_","fullVariableString","matchedVarName","variable","v","value","jsonParse","parsedValue","safeStringify","val","parseCorrectValueType","isNumberStartingWithZero","str","parseVariablesInObject","object","newObj","key","currentValue","typebotContext","TypebotContext","children","typebot","apiHost","isPreview","isLoading","onNewLog","localTypebot","setLocalTypebot","linkedTypebots","setLinkedTypebots","currentTypebotId","setCurrentTypebotId","linkedBotQueue","setLinkedBotQueue","updateVariableValue","variableId","value","formattedValue","safeStringify","v","createEdge","edge","injectLinkedTypebot","typebotToInject","typebots","updatedTypebot","pushEdgeIdInLinkedTypebotQueue","bot","queue","popEdgeIdFromLinkedTypebotQueue","React","useTypebot","import_react_frame_component","import_react","import_react","import_react_transition_group","import_react","import_react","import_utils","import_react","DefaultAvatar","React","Avatar","avatarSrc","currentAvatarSrc","React","DefaultAvatar","import_react_frame_component","import_react_transition_group","import_resize_observer","AvatarSideContainer","hostAvatarSrc","keepShowing","ref","document","show","setShow","avatarTopOffset","setAvatarTopOffset","refreshTopOffset","scrollingSideGroupRef","avatarContainer","height","avatarHeight","resizeObserver","React","Avatar","import_utils","import_models","import_utils","sanitizeUrl","url","isMobile","executeLogic","block","context","executeSetVariable","executeCondition","executeRedirect","executeCode","executeTypebotLink","variables","updateVariableValue","updateVariables","_a","evaluatedExpression","evaluateSetVariableExpression","existingVariable","str","evaluating","parseVariables","v","parseCorrectValueType","err","content","executeComparison","comparison","inputValue","value","_b","_c","formattedUrl","sanitizeUrl","func","typebot","linkedTypebots","onNewLog","createEdge","setCurrentTypebotId","pushEdgeIdInLinkedTypebotQueue","currentTypebotId","linkedTypebot","fetchAndInjectTypebot","nextGroupId","b","s","newEdge","apiHost","injectLinkedTypebot","isPreview","data","error","import_models","import_qs","import_utils","init_gtag","executeIntegration","block","context","executeGoogleSheetIntegration","executeGoogleAnalyticsIntegration","executeWebhook","sendEmail","variables","_a","initGoogleAnalytics","sendGaEvent","parseVariablesInObject","insertRowInGoogleSheets","updateRowInGoogleSheets","getRowFromGoogleSheets","options","apiHost","onNewLog","resultId","params","error","parseCellValues","parseLog","parseVariables","updateVariableValue","updateVariables","queryParams","cell","data","newVariables","existingVariable","value","cells","row","blockId","typebotId","resultValues","statusCode","isError","varMapping","func","isPreview","successMessage","errorMessage","import_models","import_react_phone_number_input","import_utils","emailRegex","urlRegex","isInputValid","inputValue","type","blockCanBeRetried","block","parseRetryBlock","variables","createEdge","content","parseVariables","newBlockId","newEdge","parseReadableDate","from","to","hasTime","isRange","currentLocale","formatOptions","fromReadable","toReadable","import_react","answersContext","AnswersContext","children","resultId","onNewAnswer","onVariablesUpdated","resultValues","setResultValues","addAnswer","answer","updateVariables","newVariables","serializedNewVariables","variable","safeStringify","updatedVariables","v","React","useAnswers","import_models","import_react","chatContext","ChatContext","children","onScroll","scroll","React","useChat","import_utils","computeTypingTimeout","bubbleContent","typingSettings","_a","wordCount","typedWordsPerMinute","typingTimeout","getLastChatBlockType","blocks","s","import_models","import_react","import_react","import_react","TypingContent","React","showAnimationDuration","EmbedBubble","block","onTransitionEnd","_a","typebot","isLoading","useTypebot","messageContainer","isTyping","setIsTyping","url","parseVariables","showContentAfterMediaLoad","onTypingEnd","React","TypingContent","import_react","showAnimationDuration","mediaLoadingFallbackTimeout","ImageBubble","block","onTransitionEnd","_a","typebot","isLoading","useTypebot","messageContainer","image","isTyping","setIsTyping","url","parseVariables","showContentAfterMediaLoad","timeout","onTypingEnd","React","TypingContent","import_react","import_models","showAnimationDuration","defaultTypingEmulation","TextBubble","block","onTransitionEnd","typebot","isLoading","useTypebot","messageContainer","isTyping","setIsTyping","content","parseVariables","_a","typingTimeout","computeTypingTimeout","onTypingEnd","React","TypingContent","import_react","import_models","showAnimationDuration","VideoBubble","block","onTransitionEnd","typebot","isLoading","useTypebot","messageContainer","isTyping","setIsTyping","showContentAfterMediaLoad","onTypingEnd","showAnimationDuration","React","TypingContent","VideoContent","content","variables","url","parseVariables","isSafariBrowser","baseUrl","HostBubble","block","onTransitionEnd","React","TextBubble","ImageBubble","VideoBubble","EmbedBubble","import_react","import_models","import_react","import_react_transition_group","GuestBubble","message","showAvatar","avatarSrc","onClick","content","isDragging","setIsDragging","React","Avatar","import_models","import_react","import_react","import_react","SendIcon","props","React","SendButton","label","isDisabled","isLoading","disableIcon","props","React","Spinner","SendIcon","import_models","import_react","import_react_phone_number_input","TextInput","inputRef","block","value","onChange","_a","_b","_c","_d","_e","_f","_g","_h","_i","_j","_k","_l","_m","_n","handleInputChange","e","handlePhoneNumberChange","React","LongTextInput","ShortTextInput","PhoneInput","isMobile","props","ref","TextForm","block","onSubmit","defaultValue","hasGuestAvatar","_a","_b","_c","inputValue","setInputValue","inputRef","isLongText","handleChange","checkIfInputIsValid","submit","React","e","TextInput","SendButton","import_utils","import_react","DateForm","onSubmit","options","hasTime","isRange","labels","inputValues","setInputValues","React","e","parseReadableDate","SendButton","import_react","ChoiceForm","block","onSubmit","_a","variables","useTypebot","resultValues","useAnswers","selectedIndices","setSelectedIndices","handleClick","itemIndex","e","toggleSelectedItemIndex","parseVariables","existingIndex","handleSubmit","isUniqueFirstButton","React","item","idx","_b","SendButton","import_models","import_react","import_react","import_react_stripe_js","import_utils","createPaymentIntent","apiHost","isPreview","inputOptions","variables","import_react_frame_component","initStripe","document","resolve","script","StripePaymentForm","options","onSuccess","apiHost","isPreview","variables","onNewLog","useTypebot","frameWindow","frameDocument","stripe","setStripe","clientSecret","setClientSecret","amountLabel","setAmountLabel","data","error","createPaymentIntent","initStripe","React","Spinner","CheckoutForm","viewerHost","scroll","useChat","ignoreFirstPaymentIntentCall","setIgnoreFirstPaymentIntentCall","elements","message","setMessage","isLoading","setIsLoading","isPayButtonVisible","setIsPayButtonVisible","paymentIntent","e","_a","_b","_c","_d","_e","_f","parseVariables","SendButton","PaymentForm","onSuccess","options","React","StripePaymentForm","import_react","import_utils","RatingForm","block","onSubmit","_a","rating","setRating","handleSubmit","e","handleClick","React","_","idx","RatingButton","SendButton","buttonType","customIcon","onClick","defaultIcon","import_react","import_utils","FileUploadForm","id","isMultipleAllowed","labels","sizeLimit","isRequired","onSubmit","onSkip","isPreview","currentTypebotId","useTypebot","resultId","useAnswers","selectedFiles","setSelectedFiles","isUploading","setIsUploading","uploadProgressPercent","setUploadProgressPercent","isDraggingOver","setIsDraggingOver","errorMessage","setErrorMessage","handleFileChange","e","onNewFiles","files","newFiles","file","startSingleFileUpload","handleSubmit","startFilesUpload","urls","_","idx","handleDragOver","handleDragLeave","handleDropFile","clearFiles","React","Spinner","FileIcon","UploadIcon","SendButton","InputChatBlock","block","hasAvatar","hasGuestAvatar","onTransitionEnd","onSkip","_a","_b","_c","typebot","useTypebot","addAnswer","useAnswers","answer","setAnswer","isEditting","setIsEditting","variableId","defaultValue","handleSubmit","label","value","itemId","isRetry","isInputValid","handleGuestBubbleClick","avatarUrl","React","GuestBubble","parseVariables","Input","onSubmit","TextForm","DateForm","ChoiceForm","PaymentForm","RatingForm","FileUploadForm","ChatGroup","blocks","startBlockIndex","groupTitle","onGroupEnd","keepShowingHostAvatar","_a","currentTypebotId","typebot","updateVariableValue","createEdge","apiHost","isPreview","onNewLog","injectLinkedTypebot","linkedTypebots","setCurrentTypebotId","pushEdgeIdInLinkedTypebotQueue","useTypebot","resultValues","updateVariables","resultId","useAnswers","scroll","useChat","processedBlocks","setProcessedBlocks","displayedChunks","setDisplayedChunks","insertBlockInStack","nextBlock","lastBlockType","getLastChatBlockType","c","idx","onNewBlockDisplayed","currentBlock","nextEdgeId","linkedTypebot","executeLogic","displayNextBlock","executeIntegration","answerContent","isRetry","_b","blockCanBeRetried","parseRetryBlock","avatarSrc","React","chunk","ChatChunks","parseVariables","bubbles","input","hostAvatar","hasGuestAvatar","onDisplayNextBlock","isSkipped","setIsSkipped","avatarSideContainerRef","refreshTopOffset","skipInput","AvatarSideContainer","block","HostBubble","InputChatBlock","import_react_frame_component","import_models","cssVariableNames","setCssVariablesValue","theme","documentStyle","setGeneralTheme","setChatTheme","generalTheme","background","font","chatTheme","hostBubbles","guestBubbles","buttons","inputs","setHostBubbles","setGuestBubbles","setButtons","setInputs","setTypebotBackground","import_utils","import_react_scroll","ConversationContainer","theme","predefinedVariables","startGroupId","onNewGroupVisible","onCompleted","typebot","updateVariableValue","linkedBotQueue","popEdgeIdFromLinkedTypebotQueue","useTypebot","frameDocument","displayedGroups","setDisplayedGroups","updateVariables","useAnswers","bottomAnchor","scrollableContainer","hasStarted","setHasStarted","displayNextGroup","edgeId","updatedTypebot","groupId","currentTypebot","nextGroup","nextEdge","nextEdgeId","startBlockIndex","prefilledVariables","injectPredefinedVariables","startEdge","key","matchingVariable","v","value","setCssVariablesValue","React","ChatContext","scroll","displayedGroup","idx","groupAfter","groupAfterStartsWithInput","ChatGroup","import_models","import_react","import_react_frame_component","LiteBadge","document","liteBadge","container","observer","mutations_list","mutation","removed_node","React","import_utils","TypebotViewer","typebot","apiHost","isPreview","isLoading","style","resultId","startGroupId","predefinedVariables","onNewLog","onNewGroupVisible","onNewAnswer","onCompleted","onVariablesUpdated","_a","_b","_c","_d","_e","containerBgColor","handleNewGroupVisible","edge","handleNewAnswer","answer","handleNewLog","log","handleCompleted","React","Frame","phone_default","style_default","importantStyles_default","TypebotContext","AnswersContext","ConversationContainer","LiteBadge","__reExport","src_exports"]}